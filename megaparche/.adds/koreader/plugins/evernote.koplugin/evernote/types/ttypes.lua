--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'thrift.Thrift'
require 'evernote.types.constants'

PrivilegeLevel = {
  NORMAL = 1,
  PREMIUM = 3,
  VIP = 5,
  MANAGER = 7,
  SUPPORT = 8,
  ADMIN = 9
}

QueryFormat = {
  USER = 1,
  SEXP = 2
}

NoteSortOrder = {
  CREATED = 1,
  UPDATED = 2,
  RELEVANCE = 3,
  UPDATE_SEQUENCE_NUMBER = 4,
  TITLE = 5
}

PremiumOrderStatus = {
  NONE = 0,
  PENDING = 1,
  ACTIVE = 2,
  FAILED = 3,
  CANCELLATION_PENDING = 4,
  CANCELED = 5
}

SharedNotebookPrivilegeLevel = {
  READ_NOTEBOOK = 0,
  MODIFY_NOTEBOOK_PLUS_ACTIVITY = 1,
  READ_NOTEBOOK_PLUS_ACTIVITY = 2,
  GROUP = 3,
  FULL_ACCESS = 4,
  BUSINESS_FULL_ACCESS = 5
}

SponsoredGroupRole = {
  GROUP_MEMBER = 1,
  GROUP_ADMIN = 2,
  GROUP_OWNER = 3
}

BusinessUserRole = {
  ADMIN = 1,
  NORMAL = 2
}

SharedNotebookInstanceRestrictions = {
  ONLY_JOINED_OR_PREVIEW = 1,
  NO_SHARED_NOTEBOOKS = 2
}

ReminderEmailConfig = {
  DO_NOT_SEND = 1,
  SEND_DAILY_EMAIL = 2
}

UserID = i32

Guid = string

Timestamp = i64

Data = __TObject:new{
  bodyHash,
  size,
  body
}

function Data:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.bodyHash = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.size = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.body = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Data:write(oprot)
  oprot:writeStructBegin('Data')
  if self.bodyHash then
    oprot:writeFieldBegin('bodyHash', TType.STRING, 1)
    oprot:writeString(self.bodyHash)
    oprot:writeFieldEnd()
  end
  if self.size then
    oprot:writeFieldBegin('size', TType.I32, 2)
    oprot:writeI32(self.size)
    oprot:writeFieldEnd()
  end
  if self.body then
    oprot:writeFieldBegin('body', TType.STRING, 3)
    oprot:writeString(self.body)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UserAttributes = __TObject:new{
  defaultLocationName,
  defaultLatitude,
  defaultLongitude,
  preactivation,
  viewedPromotions,
  incomingEmailAddress,
  recentMailedAddresses,
  comments,
  dateAgreedToTermsOfService,
  maxReferrals,
  referralCount,
  refererCode,
  sentEmailDate,
  sentEmailCount,
  dailyEmailLimit,
  emailOptOutDate,
  partnerEmailOptInDate,
  preferredLanguage,
  preferredCountry,
  clipFullPage,
  twitterUserName,
  twitterId,
  groupName,
  recognitionLanguage,
  referralProof,
  educationalDiscount,
  businessAddress,
  hideSponsorBilling,
  taxExempt,
  useEmailAutoFiling,
  reminderEmailConfig
}

function UserAttributes:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.defaultLocationName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.DOUBLE then
        self.defaultLatitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.DOUBLE then
        self.defaultLongitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.preactivation = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.viewedPromotions = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          _elem4 = iprot:readString()
          table.insert(self.viewedPromotions, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.incomingEmailAddress = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.LIST then
        self.recentMailedAddresses = {}
        local _etype8, _size5 = iprot:readListBegin()
        for _i=1,_size5 do
          _elem9 = iprot:readString()
          table.insert(self.recentMailedAddresses, _elem9)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.comments = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.dateAgreedToTermsOfService = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.maxReferrals = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I32 then
        self.referralCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.refererCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I64 then
        self.sentEmailDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I32 then
        self.sentEmailCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I32 then
        self.dailyEmailLimit = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.I64 then
        self.emailOptOutDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I64 then
        self.partnerEmailOptInDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.preferredLanguage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.preferredCountry = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.BOOL then
        self.clipFullPage = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.twitterUserName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.twitterId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.STRING then
        self.groupName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.STRING then
        self.recognitionLanguage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 28 then
      if ftype == TType.STRING then
        self.referralProof = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 29 then
      if ftype == TType.BOOL then
        self.educationalDiscount = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.businessAddress = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.hideSponsorBilling = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.BOOL then
        self.taxExempt = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.BOOL then
        self.useEmailAutoFiling = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.I32 then
        self.reminderEmailConfig = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UserAttributes:write(oprot)
  oprot:writeStructBegin('UserAttributes')
  if self.defaultLocationName then
    oprot:writeFieldBegin('defaultLocationName', TType.STRING, 1)
    oprot:writeString(self.defaultLocationName)
    oprot:writeFieldEnd()
  end
  if self.defaultLatitude then
    oprot:writeFieldBegin('defaultLatitude', TType.DOUBLE, 2)
    oprot:writeDouble(self.defaultLatitude)
    oprot:writeFieldEnd()
  end
  if self.defaultLongitude then
    oprot:writeFieldBegin('defaultLongitude', TType.DOUBLE, 3)
    oprot:writeDouble(self.defaultLongitude)
    oprot:writeFieldEnd()
  end
  if self.preactivation then
    oprot:writeFieldBegin('preactivation', TType.BOOL, 4)
    oprot:writeBool(self.preactivation)
    oprot:writeFieldEnd()
  end
  if self.viewedPromotions then
    oprot:writeFieldBegin('viewedPromotions', TType.LIST, 5)
    oprot:writeListBegin(TType.STRING, #self.viewedPromotions)
    for _,iter10 in ipairs(self.viewedPromotions) do
      oprot:writeString(iter10)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.incomingEmailAddress then
    oprot:writeFieldBegin('incomingEmailAddress', TType.STRING, 6)
    oprot:writeString(self.incomingEmailAddress)
    oprot:writeFieldEnd()
  end
  if self.recentMailedAddresses then
    oprot:writeFieldBegin('recentMailedAddresses', TType.LIST, 7)
    oprot:writeListBegin(TType.STRING, #self.recentMailedAddresses)
    for _,iter11 in ipairs(self.recentMailedAddresses) do
      oprot:writeString(iter11)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.comments then
    oprot:writeFieldBegin('comments', TType.STRING, 9)
    oprot:writeString(self.comments)
    oprot:writeFieldEnd()
  end
  if self.dateAgreedToTermsOfService then
    oprot:writeFieldBegin('dateAgreedToTermsOfService', TType.I64, 11)
    oprot:writeI64(self.dateAgreedToTermsOfService)
    oprot:writeFieldEnd()
  end
  if self.maxReferrals then
    oprot:writeFieldBegin('maxReferrals', TType.I32, 12)
    oprot:writeI32(self.maxReferrals)
    oprot:writeFieldEnd()
  end
  if self.referralCount then
    oprot:writeFieldBegin('referralCount', TType.I32, 13)
    oprot:writeI32(self.referralCount)
    oprot:writeFieldEnd()
  end
  if self.refererCode then
    oprot:writeFieldBegin('refererCode', TType.STRING, 14)
    oprot:writeString(self.refererCode)
    oprot:writeFieldEnd()
  end
  if self.sentEmailDate then
    oprot:writeFieldBegin('sentEmailDate', TType.I64, 15)
    oprot:writeI64(self.sentEmailDate)
    oprot:writeFieldEnd()
  end
  if self.sentEmailCount then
    oprot:writeFieldBegin('sentEmailCount', TType.I32, 16)
    oprot:writeI32(self.sentEmailCount)
    oprot:writeFieldEnd()
  end
  if self.dailyEmailLimit then
    oprot:writeFieldBegin('dailyEmailLimit', TType.I32, 17)
    oprot:writeI32(self.dailyEmailLimit)
    oprot:writeFieldEnd()
  end
  if self.emailOptOutDate then
    oprot:writeFieldBegin('emailOptOutDate', TType.I64, 18)
    oprot:writeI64(self.emailOptOutDate)
    oprot:writeFieldEnd()
  end
  if self.partnerEmailOptInDate then
    oprot:writeFieldBegin('partnerEmailOptInDate', TType.I64, 19)
    oprot:writeI64(self.partnerEmailOptInDate)
    oprot:writeFieldEnd()
  end
  if self.preferredLanguage then
    oprot:writeFieldBegin('preferredLanguage', TType.STRING, 20)
    oprot:writeString(self.preferredLanguage)
    oprot:writeFieldEnd()
  end
  if self.preferredCountry then
    oprot:writeFieldBegin('preferredCountry', TType.STRING, 21)
    oprot:writeString(self.preferredCountry)
    oprot:writeFieldEnd()
  end
  if self.clipFullPage then
    oprot:writeFieldBegin('clipFullPage', TType.BOOL, 22)
    oprot:writeBool(self.clipFullPage)
    oprot:writeFieldEnd()
  end
  if self.twitterUserName then
    oprot:writeFieldBegin('twitterUserName', TType.STRING, 23)
    oprot:writeString(self.twitterUserName)
    oprot:writeFieldEnd()
  end
  if self.twitterId then
    oprot:writeFieldBegin('twitterId', TType.STRING, 24)
    oprot:writeString(self.twitterId)
    oprot:writeFieldEnd()
  end
  if self.groupName then
    oprot:writeFieldBegin('groupName', TType.STRING, 25)
    oprot:writeString(self.groupName)
    oprot:writeFieldEnd()
  end
  if self.recognitionLanguage then
    oprot:writeFieldBegin('recognitionLanguage', TType.STRING, 26)
    oprot:writeString(self.recognitionLanguage)
    oprot:writeFieldEnd()
  end
  if self.referralProof then
    oprot:writeFieldBegin('referralProof', TType.STRING, 28)
    oprot:writeString(self.referralProof)
    oprot:writeFieldEnd()
  end
  if self.educationalDiscount then
    oprot:writeFieldBegin('educationalDiscount', TType.BOOL, 29)
    oprot:writeBool(self.educationalDiscount)
    oprot:writeFieldEnd()
  end
  if self.businessAddress then
    oprot:writeFieldBegin('businessAddress', TType.STRING, 30)
    oprot:writeString(self.businessAddress)
    oprot:writeFieldEnd()
  end
  if self.hideSponsorBilling then
    oprot:writeFieldBegin('hideSponsorBilling', TType.BOOL, 31)
    oprot:writeBool(self.hideSponsorBilling)
    oprot:writeFieldEnd()
  end
  if self.taxExempt then
    oprot:writeFieldBegin('taxExempt', TType.BOOL, 32)
    oprot:writeBool(self.taxExempt)
    oprot:writeFieldEnd()
  end
  if self.useEmailAutoFiling then
    oprot:writeFieldBegin('useEmailAutoFiling', TType.BOOL, 33)
    oprot:writeBool(self.useEmailAutoFiling)
    oprot:writeFieldEnd()
  end
  if self.reminderEmailConfig then
    oprot:writeFieldBegin('reminderEmailConfig', TType.I32, 34)
    oprot:writeI32(self.reminderEmailConfig)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Accounting = __TObject:new{
  uploadLimit,
  uploadLimitEnd,
  uploadLimitNextMonth,
  premiumServiceStatus,
  premiumOrderNumber,
  premiumCommerceService,
  premiumServiceStart,
  premiumServiceSKU,
  lastSuccessfulCharge,
  lastFailedCharge,
  lastFailedChargeReason,
  nextPaymentDue,
  premiumLockUntil,
  updated,
  premiumSubscriptionNumber,
  lastRequestedCharge,
  currency,
  unitPrice,
  businessId,
  businessName,
  businessRole,
  unitDiscount,
  nextChargeDate
}

function Accounting:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.uploadLimit = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.uploadLimitEnd = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.uploadLimitNextMonth = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.premiumServiceStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.premiumOrderNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.premiumCommerceService = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.premiumServiceStart = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.premiumServiceSKU = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I64 then
        self.lastSuccessfulCharge = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I64 then
        self.lastFailedCharge = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.lastFailedChargeReason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I64 then
        self.nextPaymentDue = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.premiumLockUntil = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.updated = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.premiumSubscriptionNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I64 then
        self.lastRequestedCharge = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I32 then
        self.unitPrice = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.businessId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.businessName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.businessRole = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.I32 then
        self.unitDiscount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.I64 then
        self.nextChargeDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Accounting:write(oprot)
  oprot:writeStructBegin('Accounting')
  if self.uploadLimit then
    oprot:writeFieldBegin('uploadLimit', TType.I64, 1)
    oprot:writeI64(self.uploadLimit)
    oprot:writeFieldEnd()
  end
  if self.uploadLimitEnd then
    oprot:writeFieldBegin('uploadLimitEnd', TType.I64, 2)
    oprot:writeI64(self.uploadLimitEnd)
    oprot:writeFieldEnd()
  end
  if self.uploadLimitNextMonth then
    oprot:writeFieldBegin('uploadLimitNextMonth', TType.I64, 3)
    oprot:writeI64(self.uploadLimitNextMonth)
    oprot:writeFieldEnd()
  end
  if self.premiumServiceStatus then
    oprot:writeFieldBegin('premiumServiceStatus', TType.I32, 4)
    oprot:writeI32(self.premiumServiceStatus)
    oprot:writeFieldEnd()
  end
  if self.premiumOrderNumber then
    oprot:writeFieldBegin('premiumOrderNumber', TType.STRING, 5)
    oprot:writeString(self.premiumOrderNumber)
    oprot:writeFieldEnd()
  end
  if self.premiumCommerceService then
    oprot:writeFieldBegin('premiumCommerceService', TType.STRING, 6)
    oprot:writeString(self.premiumCommerceService)
    oprot:writeFieldEnd()
  end
  if self.premiumServiceStart then
    oprot:writeFieldBegin('premiumServiceStart', TType.I64, 7)
    oprot:writeI64(self.premiumServiceStart)
    oprot:writeFieldEnd()
  end
  if self.premiumServiceSKU then
    oprot:writeFieldBegin('premiumServiceSKU', TType.STRING, 8)
    oprot:writeString(self.premiumServiceSKU)
    oprot:writeFieldEnd()
  end
  if self.lastSuccessfulCharge then
    oprot:writeFieldBegin('lastSuccessfulCharge', TType.I64, 9)
    oprot:writeI64(self.lastSuccessfulCharge)
    oprot:writeFieldEnd()
  end
  if self.lastFailedCharge then
    oprot:writeFieldBegin('lastFailedCharge', TType.I64, 10)
    oprot:writeI64(self.lastFailedCharge)
    oprot:writeFieldEnd()
  end
  if self.lastFailedChargeReason then
    oprot:writeFieldBegin('lastFailedChargeReason', TType.STRING, 11)
    oprot:writeString(self.lastFailedChargeReason)
    oprot:writeFieldEnd()
  end
  if self.nextPaymentDue then
    oprot:writeFieldBegin('nextPaymentDue', TType.I64, 12)
    oprot:writeI64(self.nextPaymentDue)
    oprot:writeFieldEnd()
  end
  if self.premiumLockUntil then
    oprot:writeFieldBegin('premiumLockUntil', TType.I64, 13)
    oprot:writeI64(self.premiumLockUntil)
    oprot:writeFieldEnd()
  end
  if self.updated then
    oprot:writeFieldBegin('updated', TType.I64, 14)
    oprot:writeI64(self.updated)
    oprot:writeFieldEnd()
  end
  if self.premiumSubscriptionNumber then
    oprot:writeFieldBegin('premiumSubscriptionNumber', TType.STRING, 16)
    oprot:writeString(self.premiumSubscriptionNumber)
    oprot:writeFieldEnd()
  end
  if self.lastRequestedCharge then
    oprot:writeFieldBegin('lastRequestedCharge', TType.I64, 17)
    oprot:writeI64(self.lastRequestedCharge)
    oprot:writeFieldEnd()
  end
  if self.currency then
    oprot:writeFieldBegin('currency', TType.STRING, 18)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.unitPrice then
    oprot:writeFieldBegin('unitPrice', TType.I32, 19)
    oprot:writeI32(self.unitPrice)
    oprot:writeFieldEnd()
  end
  if self.businessId then
    oprot:writeFieldBegin('businessId', TType.I32, 20)
    oprot:writeI32(self.businessId)
    oprot:writeFieldEnd()
  end
  if self.businessName then
    oprot:writeFieldBegin('businessName', TType.STRING, 21)
    oprot:writeString(self.businessName)
    oprot:writeFieldEnd()
  end
  if self.businessRole then
    oprot:writeFieldBegin('businessRole', TType.I32, 22)
    oprot:writeI32(self.businessRole)
    oprot:writeFieldEnd()
  end
  if self.unitDiscount then
    oprot:writeFieldBegin('unitDiscount', TType.I32, 23)
    oprot:writeI32(self.unitDiscount)
    oprot:writeFieldEnd()
  end
  if self.nextChargeDate then
    oprot:writeFieldBegin('nextChargeDate', TType.I64, 24)
    oprot:writeI64(self.nextChargeDate)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BusinessUserInfo = __TObject:new{
  businessId,
  businessName,
  role,
  email
}

function BusinessUserInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.businessId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.businessName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.role = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.email = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BusinessUserInfo:write(oprot)
  oprot:writeStructBegin('BusinessUserInfo')
  if self.businessId then
    oprot:writeFieldBegin('businessId', TType.I32, 1)
    oprot:writeI32(self.businessId)
    oprot:writeFieldEnd()
  end
  if self.businessName then
    oprot:writeFieldBegin('businessName', TType.STRING, 2)
    oprot:writeString(self.businessName)
    oprot:writeFieldEnd()
  end
  if self.role then
    oprot:writeFieldBegin('role', TType.I32, 3)
    oprot:writeI32(self.role)
    oprot:writeFieldEnd()
  end
  if self.email then
    oprot:writeFieldBegin('email', TType.STRING, 4)
    oprot:writeString(self.email)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PremiumInfo = __TObject:new{
  currentTime,
  premium,
  premiumRecurring,
  premiumExpirationDate,
  premiumExtendable,
  premiumPending,
  premiumCancellationPending,
  canPurchaseUploadAllowance,
  sponsoredGroupName,
  sponsoredGroupRole,
  premiumUpgradable
}

function PremiumInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.currentTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.premium = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.premiumRecurring = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.premiumExpirationDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.premiumExtendable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.premiumPending = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.premiumCancellationPending = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.BOOL then
        self.canPurchaseUploadAllowance = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.sponsoredGroupName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.sponsoredGroupRole = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.BOOL then
        self.premiumUpgradable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PremiumInfo:write(oprot)
  oprot:writeStructBegin('PremiumInfo')
  if self.currentTime then
    oprot:writeFieldBegin('currentTime', TType.I64, 1)
    oprot:writeI64(self.currentTime)
    oprot:writeFieldEnd()
  end
  if self.premium then
    oprot:writeFieldBegin('premium', TType.BOOL, 2)
    oprot:writeBool(self.premium)
    oprot:writeFieldEnd()
  end
  if self.premiumRecurring then
    oprot:writeFieldBegin('premiumRecurring', TType.BOOL, 3)
    oprot:writeBool(self.premiumRecurring)
    oprot:writeFieldEnd()
  end
  if self.premiumExpirationDate then
    oprot:writeFieldBegin('premiumExpirationDate', TType.I64, 4)
    oprot:writeI64(self.premiumExpirationDate)
    oprot:writeFieldEnd()
  end
  if self.premiumExtendable then
    oprot:writeFieldBegin('premiumExtendable', TType.BOOL, 5)
    oprot:writeBool(self.premiumExtendable)
    oprot:writeFieldEnd()
  end
  if self.premiumPending then
    oprot:writeFieldBegin('premiumPending', TType.BOOL, 6)
    oprot:writeBool(self.premiumPending)
    oprot:writeFieldEnd()
  end
  if self.premiumCancellationPending then
    oprot:writeFieldBegin('premiumCancellationPending', TType.BOOL, 7)
    oprot:writeBool(self.premiumCancellationPending)
    oprot:writeFieldEnd()
  end
  if self.canPurchaseUploadAllowance then
    oprot:writeFieldBegin('canPurchaseUploadAllowance', TType.BOOL, 8)
    oprot:writeBool(self.canPurchaseUploadAllowance)
    oprot:writeFieldEnd()
  end
  if self.sponsoredGroupName then
    oprot:writeFieldBegin('sponsoredGroupName', TType.STRING, 9)
    oprot:writeString(self.sponsoredGroupName)
    oprot:writeFieldEnd()
  end
  if self.sponsoredGroupRole then
    oprot:writeFieldBegin('sponsoredGroupRole', TType.I32, 10)
    oprot:writeI32(self.sponsoredGroupRole)
    oprot:writeFieldEnd()
  end
  if self.premiumUpgradable then
    oprot:writeFieldBegin('premiumUpgradable', TType.BOOL, 11)
    oprot:writeBool(self.premiumUpgradable)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

User = __TObject:new{
  id,
  username,
  email,
  name,
  timezone,
  privilege,
  created,
  updated,
  deleted,
  active,
  shardId,
  attributes,
  accounting,
  premiumInfo,
  businessUserInfo
}

function User:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.id = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.email = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.timezone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.privilege = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I64 then
        self.created = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I64 then
        self.updated = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.deleted = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.BOOL then
        self.active = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.shardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRUCT then
        self.attributes = UserAttributes:new{}
        self.attributes:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRUCT then
        self.accounting = Accounting:new{}
        self.accounting:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRUCT then
        self.premiumInfo = PremiumInfo:new{}
        self.premiumInfo:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRUCT then
        self.businessUserInfo = BusinessUserInfo:new{}
        self.businessUserInfo:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function User:write(oprot)
  oprot:writeStructBegin('User')
  if self.id then
    oprot:writeFieldBegin('id', TType.I32, 1)
    oprot:writeI32(self.id)
    oprot:writeFieldEnd()
  end
  if self.username then
    oprot:writeFieldBegin('username', TType.STRING, 2)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  if self.email then
    oprot:writeFieldBegin('email', TType.STRING, 3)
    oprot:writeString(self.email)
    oprot:writeFieldEnd()
  end
  if self.name then
    oprot:writeFieldBegin('name', TType.STRING, 4)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.timezone then
    oprot:writeFieldBegin('timezone', TType.STRING, 6)
    oprot:writeString(self.timezone)
    oprot:writeFieldEnd()
  end
  if self.privilege then
    oprot:writeFieldBegin('privilege', TType.I32, 7)
    oprot:writeI32(self.privilege)
    oprot:writeFieldEnd()
  end
  if self.created then
    oprot:writeFieldBegin('created', TType.I64, 9)
    oprot:writeI64(self.created)
    oprot:writeFieldEnd()
  end
  if self.updated then
    oprot:writeFieldBegin('updated', TType.I64, 10)
    oprot:writeI64(self.updated)
    oprot:writeFieldEnd()
  end
  if self.deleted then
    oprot:writeFieldBegin('deleted', TType.I64, 11)
    oprot:writeI64(self.deleted)
    oprot:writeFieldEnd()
  end
  if self.active then
    oprot:writeFieldBegin('active', TType.BOOL, 13)
    oprot:writeBool(self.active)
    oprot:writeFieldEnd()
  end
  if self.shardId then
    oprot:writeFieldBegin('shardId', TType.STRING, 14)
    oprot:writeString(self.shardId)
    oprot:writeFieldEnd()
  end
  if self.attributes then
    oprot:writeFieldBegin('attributes', TType.STRUCT, 15)
    self.attributes:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.accounting then
    oprot:writeFieldBegin('accounting', TType.STRUCT, 16)
    self.accounting:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.premiumInfo then
    oprot:writeFieldBegin('premiumInfo', TType.STRUCT, 17)
    self.premiumInfo:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.businessUserInfo then
    oprot:writeFieldBegin('businessUserInfo', TType.STRUCT, 18)
    self.businessUserInfo:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Tag = __TObject:new{
  guid,
  name,
  parentGuid,
  updateSequenceNum
}

function Tag:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.parentGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.updateSequenceNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Tag:write(oprot)
  oprot:writeStructBegin('Tag')
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 1)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.name then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.parentGuid then
    oprot:writeFieldBegin('parentGuid', TType.STRING, 3)
    oprot:writeString(self.parentGuid)
    oprot:writeFieldEnd()
  end
  if self.updateSequenceNum then
    oprot:writeFieldBegin('updateSequenceNum', TType.I32, 4)
    oprot:writeI32(self.updateSequenceNum)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LazyMap = __TObject:new{
  keysOnly,
  fullMap
}

function LazyMap:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.SET then
        self.keysOnly = {}
        local _etype15, _size12 = iprot:readSetBegin()
        for _i=1,_size12 do
          _elem16 = iprot:readString()
          self.keysOnly[_elem16] = _elem16
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.fullMap = {}
        local _ktype18, _vtype19, _size17 = iprot:readMapBegin()
        for _i=1,_size17 do
          _key21 = iprot:readString()
          _val22 = iprot:readString()
          self.fullMap[_key21] = _val22
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LazyMap:write(oprot)
  oprot:writeStructBegin('LazyMap')
  if self.keysOnly then
    oprot:writeFieldBegin('keysOnly', TType.SET, 1)
    oprot:writeSetBegin(TType.STRING, #self.keysOnly)
    for iter23,_ in pairs(self.keysOnly) do
      oprot:writeString(iter23)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.fullMap then
    oprot:writeFieldBegin('fullMap', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRING, #self.fullMap)
    for kiter24,viter25 in pairs(self.fullMap) do
      oprot:writeString(kiter24)
      oprot:writeString(viter25)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ResourceAttributes = __TObject:new{
  sourceURL,
  timestamp,
  latitude,
  longitude,
  altitude,
  cameraMake,
  cameraModel,
  clientWillIndex,
  recoType,
  fileName,
  attachment,
  applicationData
}

function ResourceAttributes:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.sourceURL = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.timestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.DOUBLE then
        self.latitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.DOUBLE then
        self.longitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.DOUBLE then
        self.altitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.cameraMake = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.cameraModel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.BOOL then
        self.clientWillIndex = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.recoType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.fileName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.BOOL then
        self.attachment = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRUCT then
        self.applicationData = LazyMap:new{}
        self.applicationData:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ResourceAttributes:write(oprot)
  oprot:writeStructBegin('ResourceAttributes')
  if self.sourceURL then
    oprot:writeFieldBegin('sourceURL', TType.STRING, 1)
    oprot:writeString(self.sourceURL)
    oprot:writeFieldEnd()
  end
  if self.timestamp then
    oprot:writeFieldBegin('timestamp', TType.I64, 2)
    oprot:writeI64(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.latitude then
    oprot:writeFieldBegin('latitude', TType.DOUBLE, 3)
    oprot:writeDouble(self.latitude)
    oprot:writeFieldEnd()
  end
  if self.longitude then
    oprot:writeFieldBegin('longitude', TType.DOUBLE, 4)
    oprot:writeDouble(self.longitude)
    oprot:writeFieldEnd()
  end
  if self.altitude then
    oprot:writeFieldBegin('altitude', TType.DOUBLE, 5)
    oprot:writeDouble(self.altitude)
    oprot:writeFieldEnd()
  end
  if self.cameraMake then
    oprot:writeFieldBegin('cameraMake', TType.STRING, 6)
    oprot:writeString(self.cameraMake)
    oprot:writeFieldEnd()
  end
  if self.cameraModel then
    oprot:writeFieldBegin('cameraModel', TType.STRING, 7)
    oprot:writeString(self.cameraModel)
    oprot:writeFieldEnd()
  end
  if self.clientWillIndex then
    oprot:writeFieldBegin('clientWillIndex', TType.BOOL, 8)
    oprot:writeBool(self.clientWillIndex)
    oprot:writeFieldEnd()
  end
  if self.recoType then
    oprot:writeFieldBegin('recoType', TType.STRING, 9)
    oprot:writeString(self.recoType)
    oprot:writeFieldEnd()
  end
  if self.fileName then
    oprot:writeFieldBegin('fileName', TType.STRING, 10)
    oprot:writeString(self.fileName)
    oprot:writeFieldEnd()
  end
  if self.attachment then
    oprot:writeFieldBegin('attachment', TType.BOOL, 11)
    oprot:writeBool(self.attachment)
    oprot:writeFieldEnd()
  end
  if self.applicationData then
    oprot:writeFieldBegin('applicationData', TType.STRUCT, 12)
    self.applicationData:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Resource = __TObject:new{
  guid,
  noteGuid,
  data,
  mime,
  width,
  height,
  duration,
  active,
  recognition,
  attributes,
  updateSequenceNum,
  alternateData
}

function Resource:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.noteGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.data = Data:new{}
        self.data:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.mime = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I16 then
        self.width = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I16 then
        self.height = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I16 then
        self.duration = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.BOOL then
        self.active = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRUCT then
        self.recognition = Data:new{}
        self.recognition:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.attributes = ResourceAttributes:new{}
        self.attributes:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.updateSequenceNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRUCT then
        self.alternateData = Data:new{}
        self.alternateData:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Resource:write(oprot)
  oprot:writeStructBegin('Resource')
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 1)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.noteGuid then
    oprot:writeFieldBegin('noteGuid', TType.STRING, 2)
    oprot:writeString(self.noteGuid)
    oprot:writeFieldEnd()
  end
  if self.data then
    oprot:writeFieldBegin('data', TType.STRUCT, 3)
    self.data:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.mime then
    oprot:writeFieldBegin('mime', TType.STRING, 4)
    oprot:writeString(self.mime)
    oprot:writeFieldEnd()
  end
  if self.width then
    oprot:writeFieldBegin('width', TType.I16, 5)
    oprot:writeI16(self.width)
    oprot:writeFieldEnd()
  end
  if self.height then
    oprot:writeFieldBegin('height', TType.I16, 6)
    oprot:writeI16(self.height)
    oprot:writeFieldEnd()
  end
  if self.duration then
    oprot:writeFieldBegin('duration', TType.I16, 7)
    oprot:writeI16(self.duration)
    oprot:writeFieldEnd()
  end
  if self.active then
    oprot:writeFieldBegin('active', TType.BOOL, 8)
    oprot:writeBool(self.active)
    oprot:writeFieldEnd()
  end
  if self.recognition then
    oprot:writeFieldBegin('recognition', TType.STRUCT, 9)
    self.recognition:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.attributes then
    oprot:writeFieldBegin('attributes', TType.STRUCT, 11)
    self.attributes:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.updateSequenceNum then
    oprot:writeFieldBegin('updateSequenceNum', TType.I32, 12)
    oprot:writeI32(self.updateSequenceNum)
    oprot:writeFieldEnd()
  end
  if self.alternateData then
    oprot:writeFieldBegin('alternateData', TType.STRUCT, 13)
    self.alternateData:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NoteAttributes = __TObject:new{
  subjectDate,
  latitude,
  longitude,
  altitude,
  author,
  source,
  sourceURL,
  sourceApplication,
  shareDate,
  reminderOrder,
  reminderDoneTime,
  reminderTime,
  placeName,
  contentClass,
  applicationData,
  lastEditedBy,
  classifications,
  creatorId,
  lastEditorId
}

function NoteAttributes:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.subjectDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.DOUBLE then
        self.latitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.DOUBLE then
        self.longitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.DOUBLE then
        self.altitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.author = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.source = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.sourceURL = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.sourceApplication = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.I64 then
        self.shareDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.I64 then
        self.reminderOrder = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I64 then
        self.reminderDoneTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I64 then
        self.reminderTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.placeName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.contentClass = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRUCT then
        self.applicationData = LazyMap:new{}
        self.applicationData:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.lastEditedBy = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.MAP then
        self.classifications = {}
        local _ktype27, _vtype28, _size26 = iprot:readMapBegin()
        for _i=1,_size26 do
          _key30 = iprot:readString()
          _val31 = iprot:readString()
          self.classifications[_key30] = _val31
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.I32 then
        self.creatorId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 28 then
      if ftype == TType.I32 then
        self.lastEditorId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NoteAttributes:write(oprot)
  oprot:writeStructBegin('NoteAttributes')
  if self.subjectDate then
    oprot:writeFieldBegin('subjectDate', TType.I64, 1)
    oprot:writeI64(self.subjectDate)
    oprot:writeFieldEnd()
  end
  if self.latitude then
    oprot:writeFieldBegin('latitude', TType.DOUBLE, 10)
    oprot:writeDouble(self.latitude)
    oprot:writeFieldEnd()
  end
  if self.longitude then
    oprot:writeFieldBegin('longitude', TType.DOUBLE, 11)
    oprot:writeDouble(self.longitude)
    oprot:writeFieldEnd()
  end
  if self.altitude then
    oprot:writeFieldBegin('altitude', TType.DOUBLE, 12)
    oprot:writeDouble(self.altitude)
    oprot:writeFieldEnd()
  end
  if self.author then
    oprot:writeFieldBegin('author', TType.STRING, 13)
    oprot:writeString(self.author)
    oprot:writeFieldEnd()
  end
  if self.source then
    oprot:writeFieldBegin('source', TType.STRING, 14)
    oprot:writeString(self.source)
    oprot:writeFieldEnd()
  end
  if self.sourceURL then
    oprot:writeFieldBegin('sourceURL', TType.STRING, 15)
    oprot:writeString(self.sourceURL)
    oprot:writeFieldEnd()
  end
  if self.sourceApplication then
    oprot:writeFieldBegin('sourceApplication', TType.STRING, 16)
    oprot:writeString(self.sourceApplication)
    oprot:writeFieldEnd()
  end
  if self.shareDate then
    oprot:writeFieldBegin('shareDate', TType.I64, 17)
    oprot:writeI64(self.shareDate)
    oprot:writeFieldEnd()
  end
  if self.reminderOrder then
    oprot:writeFieldBegin('reminderOrder', TType.I64, 18)
    oprot:writeI64(self.reminderOrder)
    oprot:writeFieldEnd()
  end
  if self.reminderDoneTime then
    oprot:writeFieldBegin('reminderDoneTime', TType.I64, 19)
    oprot:writeI64(self.reminderDoneTime)
    oprot:writeFieldEnd()
  end
  if self.reminderTime then
    oprot:writeFieldBegin('reminderTime', TType.I64, 20)
    oprot:writeI64(self.reminderTime)
    oprot:writeFieldEnd()
  end
  if self.placeName then
    oprot:writeFieldBegin('placeName', TType.STRING, 21)
    oprot:writeString(self.placeName)
    oprot:writeFieldEnd()
  end
  if self.contentClass then
    oprot:writeFieldBegin('contentClass', TType.STRING, 22)
    oprot:writeString(self.contentClass)
    oprot:writeFieldEnd()
  end
  if self.applicationData then
    oprot:writeFieldBegin('applicationData', TType.STRUCT, 23)
    self.applicationData:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.lastEditedBy then
    oprot:writeFieldBegin('lastEditedBy', TType.STRING, 24)
    oprot:writeString(self.lastEditedBy)
    oprot:writeFieldEnd()
  end
  if self.classifications then
    oprot:writeFieldBegin('classifications', TType.MAP, 26)
    oprot:writeMapBegin(TType.STRING, TType.STRING, #self.classifications)
    for kiter32,viter33 in pairs(self.classifications) do
      oprot:writeString(kiter32)
      oprot:writeString(viter33)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.creatorId then
    oprot:writeFieldBegin('creatorId', TType.I32, 27)
    oprot:writeI32(self.creatorId)
    oprot:writeFieldEnd()
  end
  if self.lastEditorId then
    oprot:writeFieldBegin('lastEditorId', TType.I32, 28)
    oprot:writeI32(self.lastEditorId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Note = __TObject:new{
  guid,
  title,
  content,
  contentHash,
  contentLength,
  created,
  updated,
  deleted,
  active,
  updateSequenceNum,
  notebookGuid,
  tagGuids,
  resources,
  attributes,
  tagNames
}

function Note:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.contentHash = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.contentLength = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.created = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.updated = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I64 then
        self.deleted = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.BOOL then
        self.active = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.updateSequenceNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.notebookGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.tagGuids = {}
        local _etype37, _size34 = iprot:readListBegin()
        for _i=1,_size34 do
          _elem38 = iprot:readString()
          table.insert(self.tagGuids, _elem38)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.LIST then
        self.resources = {}
        local _etype42, _size39 = iprot:readListBegin()
        for _i=1,_size39 do
          _elem43 = Resource:new{}
          _elem43:read(iprot)
          table.insert(self.resources, _elem43)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRUCT then
        self.attributes = NoteAttributes:new{}
        self.attributes:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.LIST then
        self.tagNames = {}
        local _etype47, _size44 = iprot:readListBegin()
        for _i=1,_size44 do
          _elem48 = iprot:readString()
          table.insert(self.tagNames, _elem48)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Note:write(oprot)
  oprot:writeStructBegin('Note')
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 1)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.title then
    oprot:writeFieldBegin('title', TType.STRING, 2)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.content then
    oprot:writeFieldBegin('content', TType.STRING, 3)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  if self.contentHash then
    oprot:writeFieldBegin('contentHash', TType.STRING, 4)
    oprot:writeString(self.contentHash)
    oprot:writeFieldEnd()
  end
  if self.contentLength then
    oprot:writeFieldBegin('contentLength', TType.I32, 5)
    oprot:writeI32(self.contentLength)
    oprot:writeFieldEnd()
  end
  if self.created then
    oprot:writeFieldBegin('created', TType.I64, 6)
    oprot:writeI64(self.created)
    oprot:writeFieldEnd()
  end
  if self.updated then
    oprot:writeFieldBegin('updated', TType.I64, 7)
    oprot:writeI64(self.updated)
    oprot:writeFieldEnd()
  end
  if self.deleted then
    oprot:writeFieldBegin('deleted', TType.I64, 8)
    oprot:writeI64(self.deleted)
    oprot:writeFieldEnd()
  end
  if self.active then
    oprot:writeFieldBegin('active', TType.BOOL, 9)
    oprot:writeBool(self.active)
    oprot:writeFieldEnd()
  end
  if self.updateSequenceNum then
    oprot:writeFieldBegin('updateSequenceNum', TType.I32, 10)
    oprot:writeI32(self.updateSequenceNum)
    oprot:writeFieldEnd()
  end
  if self.notebookGuid then
    oprot:writeFieldBegin('notebookGuid', TType.STRING, 11)
    oprot:writeString(self.notebookGuid)
    oprot:writeFieldEnd()
  end
  if self.tagGuids then
    oprot:writeFieldBegin('tagGuids', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.tagGuids)
    for _,iter49 in ipairs(self.tagGuids) do
      oprot:writeString(iter49)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.resources then
    oprot:writeFieldBegin('resources', TType.LIST, 13)
    oprot:writeListBegin(TType.STRUCT, #self.resources)
    for _,iter50 in ipairs(self.resources) do
      iter50:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.attributes then
    oprot:writeFieldBegin('attributes', TType.STRUCT, 14)
    self.attributes:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.tagNames then
    oprot:writeFieldBegin('tagNames', TType.LIST, 15)
    oprot:writeListBegin(TType.STRING, #self.tagNames)
    for _,iter51 in ipairs(self.tagNames) do
      oprot:writeString(iter51)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Publishing = __TObject:new{
  uri,
  order,
  ascending,
  publicDescription
}

function Publishing:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.uri = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.order = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.ascending = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.publicDescription = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Publishing:write(oprot)
  oprot:writeStructBegin('Publishing')
  if self.uri then
    oprot:writeFieldBegin('uri', TType.STRING, 1)
    oprot:writeString(self.uri)
    oprot:writeFieldEnd()
  end
  if self.order then
    oprot:writeFieldBegin('order', TType.I32, 2)
    oprot:writeI32(self.order)
    oprot:writeFieldEnd()
  end
  if self.ascending then
    oprot:writeFieldBegin('ascending', TType.BOOL, 3)
    oprot:writeBool(self.ascending)
    oprot:writeFieldEnd()
  end
  if self.publicDescription then
    oprot:writeFieldBegin('publicDescription', TType.STRING, 4)
    oprot:writeString(self.publicDescription)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BusinessNotebook = __TObject:new{
  notebookDescription,
  privilege,
  recommended
}

function BusinessNotebook:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.notebookDescription = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.privilege = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.recommended = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BusinessNotebook:write(oprot)
  oprot:writeStructBegin('BusinessNotebook')
  if self.notebookDescription then
    oprot:writeFieldBegin('notebookDescription', TType.STRING, 1)
    oprot:writeString(self.notebookDescription)
    oprot:writeFieldEnd()
  end
  if self.privilege then
    oprot:writeFieldBegin('privilege', TType.I32, 2)
    oprot:writeI32(self.privilege)
    oprot:writeFieldEnd()
  end
  if self.recommended then
    oprot:writeFieldBegin('recommended', TType.BOOL, 3)
    oprot:writeBool(self.recommended)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SavedSearchScope = __TObject:new{
  includeAccount,
  includePersonalLinkedNotebooks,
  includeBusinessLinkedNotebooks
}

function SavedSearchScope:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.includeAccount = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.includePersonalLinkedNotebooks = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.includeBusinessLinkedNotebooks = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SavedSearchScope:write(oprot)
  oprot:writeStructBegin('SavedSearchScope')
  if self.includeAccount then
    oprot:writeFieldBegin('includeAccount', TType.BOOL, 1)
    oprot:writeBool(self.includeAccount)
    oprot:writeFieldEnd()
  end
  if self.includePersonalLinkedNotebooks then
    oprot:writeFieldBegin('includePersonalLinkedNotebooks', TType.BOOL, 2)
    oprot:writeBool(self.includePersonalLinkedNotebooks)
    oprot:writeFieldEnd()
  end
  if self.includeBusinessLinkedNotebooks then
    oprot:writeFieldBegin('includeBusinessLinkedNotebooks', TType.BOOL, 3)
    oprot:writeBool(self.includeBusinessLinkedNotebooks)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SavedSearch = __TObject:new{
  guid,
  name,
  query,
  format,
  updateSequenceNum,
  scope
}

function SavedSearch:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.query = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.format = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.updateSequenceNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.scope = SavedSearchScope:new{}
        self.scope:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SavedSearch:write(oprot)
  oprot:writeStructBegin('SavedSearch')
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 1)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.name then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.query then
    oprot:writeFieldBegin('query', TType.STRING, 3)
    oprot:writeString(self.query)
    oprot:writeFieldEnd()
  end
  if self.format then
    oprot:writeFieldBegin('format', TType.I32, 4)
    oprot:writeI32(self.format)
    oprot:writeFieldEnd()
  end
  if self.updateSequenceNum then
    oprot:writeFieldBegin('updateSequenceNum', TType.I32, 5)
    oprot:writeI32(self.updateSequenceNum)
    oprot:writeFieldEnd()
  end
  if self.scope then
    oprot:writeFieldBegin('scope', TType.STRUCT, 6)
    self.scope:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SharedNotebookRecipientSettings = __TObject:new{
  reminderNotifyEmail,
  reminderNotifyInApp
}

function SharedNotebookRecipientSettings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.reminderNotifyEmail = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.reminderNotifyInApp = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SharedNotebookRecipientSettings:write(oprot)
  oprot:writeStructBegin('SharedNotebookRecipientSettings')
  if self.reminderNotifyEmail then
    oprot:writeFieldBegin('reminderNotifyEmail', TType.BOOL, 1)
    oprot:writeBool(self.reminderNotifyEmail)
    oprot:writeFieldEnd()
  end
  if self.reminderNotifyInApp then
    oprot:writeFieldBegin('reminderNotifyInApp', TType.BOOL, 2)
    oprot:writeBool(self.reminderNotifyInApp)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SharedNotebook = __TObject:new{
  id,
  userId,
  notebookGuid,
  email,
  notebookModifiable,
  requireLogin,
  serviceCreated,
  serviceUpdated,
  shareKey,
  username,
  privilege,
  allowPreview,
  recipientSettings
}

function SharedNotebook:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.userId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.notebookGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.email = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.notebookModifiable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.requireLogin = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.serviceCreated = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I64 then
        self.serviceUpdated = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.shareKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.privilege = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.BOOL then
        self.allowPreview = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRUCT then
        self.recipientSettings = SharedNotebookRecipientSettings:new{}
        self.recipientSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SharedNotebook:write(oprot)
  oprot:writeStructBegin('SharedNotebook')
  if self.id then
    oprot:writeFieldBegin('id', TType.I64, 1)
    oprot:writeI64(self.id)
    oprot:writeFieldEnd()
  end
  if self.userId then
    oprot:writeFieldBegin('userId', TType.I32, 2)
    oprot:writeI32(self.userId)
    oprot:writeFieldEnd()
  end
  if self.notebookGuid then
    oprot:writeFieldBegin('notebookGuid', TType.STRING, 3)
    oprot:writeString(self.notebookGuid)
    oprot:writeFieldEnd()
  end
  if self.email then
    oprot:writeFieldBegin('email', TType.STRING, 4)
    oprot:writeString(self.email)
    oprot:writeFieldEnd()
  end
  if self.notebookModifiable then
    oprot:writeFieldBegin('notebookModifiable', TType.BOOL, 5)
    oprot:writeBool(self.notebookModifiable)
    oprot:writeFieldEnd()
  end
  if self.requireLogin then
    oprot:writeFieldBegin('requireLogin', TType.BOOL, 6)
    oprot:writeBool(self.requireLogin)
    oprot:writeFieldEnd()
  end
  if self.serviceCreated then
    oprot:writeFieldBegin('serviceCreated', TType.I64, 7)
    oprot:writeI64(self.serviceCreated)
    oprot:writeFieldEnd()
  end
  if self.serviceUpdated then
    oprot:writeFieldBegin('serviceUpdated', TType.I64, 10)
    oprot:writeI64(self.serviceUpdated)
    oprot:writeFieldEnd()
  end
  if self.shareKey then
    oprot:writeFieldBegin('shareKey', TType.STRING, 8)
    oprot:writeString(self.shareKey)
    oprot:writeFieldEnd()
  end
  if self.username then
    oprot:writeFieldBegin('username', TType.STRING, 9)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  if self.privilege then
    oprot:writeFieldBegin('privilege', TType.I32, 11)
    oprot:writeI32(self.privilege)
    oprot:writeFieldEnd()
  end
  if self.allowPreview then
    oprot:writeFieldBegin('allowPreview', TType.BOOL, 12)
    oprot:writeBool(self.allowPreview)
    oprot:writeFieldEnd()
  end
  if self.recipientSettings then
    oprot:writeFieldBegin('recipientSettings', TType.STRUCT, 13)
    self.recipientSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotebookRestrictions = __TObject:new{
  noReadNotes,
  noCreateNotes,
  noUpdateNotes,
  noExpungeNotes,
  noShareNotes,
  noEmailNotes,
  noSendMessageToRecipients,
  noUpdateNotebook,
  noExpungeNotebook,
  noSetDefaultNotebook,
  noSetNotebookStack,
  noPublishToPublic,
  noPublishToBusinessLibrary,
  noCreateTags,
  noUpdateTags,
  noExpungeTags,
  noSetParentTag,
  noCreateSharedNotebooks,
  updateWhichSharedNotebookRestrictions,
  expungeWhichSharedNotebookRestrictions
}

function NotebookRestrictions:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.noReadNotes = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.noCreateNotes = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.noUpdateNotes = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.noExpungeNotes = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.noShareNotes = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.noEmailNotes = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.noSendMessageToRecipients = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.BOOL then
        self.noUpdateNotebook = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.BOOL then
        self.noExpungeNotebook = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.noSetDefaultNotebook = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.BOOL then
        self.noSetNotebookStack = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.BOOL then
        self.noPublishToPublic = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.BOOL then
        self.noPublishToBusinessLibrary = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.BOOL then
        self.noCreateTags = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.BOOL then
        self.noUpdateTags = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.BOOL then
        self.noExpungeTags = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.BOOL then
        self.noSetParentTag = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.BOOL then
        self.noCreateSharedNotebooks = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I32 then
        self.updateWhichSharedNotebookRestrictions = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.expungeWhichSharedNotebookRestrictions = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotebookRestrictions:write(oprot)
  oprot:writeStructBegin('NotebookRestrictions')
  if self.noReadNotes then
    oprot:writeFieldBegin('noReadNotes', TType.BOOL, 1)
    oprot:writeBool(self.noReadNotes)
    oprot:writeFieldEnd()
  end
  if self.noCreateNotes then
    oprot:writeFieldBegin('noCreateNotes', TType.BOOL, 2)
    oprot:writeBool(self.noCreateNotes)
    oprot:writeFieldEnd()
  end
  if self.noUpdateNotes then
    oprot:writeFieldBegin('noUpdateNotes', TType.BOOL, 3)
    oprot:writeBool(self.noUpdateNotes)
    oprot:writeFieldEnd()
  end
  if self.noExpungeNotes then
    oprot:writeFieldBegin('noExpungeNotes', TType.BOOL, 4)
    oprot:writeBool(self.noExpungeNotes)
    oprot:writeFieldEnd()
  end
  if self.noShareNotes then
    oprot:writeFieldBegin('noShareNotes', TType.BOOL, 5)
    oprot:writeBool(self.noShareNotes)
    oprot:writeFieldEnd()
  end
  if self.noEmailNotes then
    oprot:writeFieldBegin('noEmailNotes', TType.BOOL, 6)
    oprot:writeBool(self.noEmailNotes)
    oprot:writeFieldEnd()
  end
  if self.noSendMessageToRecipients then
    oprot:writeFieldBegin('noSendMessageToRecipients', TType.BOOL, 7)
    oprot:writeBool(self.noSendMessageToRecipients)
    oprot:writeFieldEnd()
  end
  if self.noUpdateNotebook then
    oprot:writeFieldBegin('noUpdateNotebook', TType.BOOL, 8)
    oprot:writeBool(self.noUpdateNotebook)
    oprot:writeFieldEnd()
  end
  if self.noExpungeNotebook then
    oprot:writeFieldBegin('noExpungeNotebook', TType.BOOL, 9)
    oprot:writeBool(self.noExpungeNotebook)
    oprot:writeFieldEnd()
  end
  if self.noSetDefaultNotebook then
    oprot:writeFieldBegin('noSetDefaultNotebook', TType.BOOL, 10)
    oprot:writeBool(self.noSetDefaultNotebook)
    oprot:writeFieldEnd()
  end
  if self.noSetNotebookStack then
    oprot:writeFieldBegin('noSetNotebookStack', TType.BOOL, 11)
    oprot:writeBool(self.noSetNotebookStack)
    oprot:writeFieldEnd()
  end
  if self.noPublishToPublic then
    oprot:writeFieldBegin('noPublishToPublic', TType.BOOL, 12)
    oprot:writeBool(self.noPublishToPublic)
    oprot:writeFieldEnd()
  end
  if self.noPublishToBusinessLibrary then
    oprot:writeFieldBegin('noPublishToBusinessLibrary', TType.BOOL, 13)
    oprot:writeBool(self.noPublishToBusinessLibrary)
    oprot:writeFieldEnd()
  end
  if self.noCreateTags then
    oprot:writeFieldBegin('noCreateTags', TType.BOOL, 14)
    oprot:writeBool(self.noCreateTags)
    oprot:writeFieldEnd()
  end
  if self.noUpdateTags then
    oprot:writeFieldBegin('noUpdateTags', TType.BOOL, 15)
    oprot:writeBool(self.noUpdateTags)
    oprot:writeFieldEnd()
  end
  if self.noExpungeTags then
    oprot:writeFieldBegin('noExpungeTags', TType.BOOL, 16)
    oprot:writeBool(self.noExpungeTags)
    oprot:writeFieldEnd()
  end
  if self.noSetParentTag then
    oprot:writeFieldBegin('noSetParentTag', TType.BOOL, 17)
    oprot:writeBool(self.noSetParentTag)
    oprot:writeFieldEnd()
  end
  if self.noCreateSharedNotebooks then
    oprot:writeFieldBegin('noCreateSharedNotebooks', TType.BOOL, 18)
    oprot:writeBool(self.noCreateSharedNotebooks)
    oprot:writeFieldEnd()
  end
  if self.updateWhichSharedNotebookRestrictions then
    oprot:writeFieldBegin('updateWhichSharedNotebookRestrictions', TType.I32, 19)
    oprot:writeI32(self.updateWhichSharedNotebookRestrictions)
    oprot:writeFieldEnd()
  end
  if self.expungeWhichSharedNotebookRestrictions then
    oprot:writeFieldBegin('expungeWhichSharedNotebookRestrictions', TType.I32, 20)
    oprot:writeI32(self.expungeWhichSharedNotebookRestrictions)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Notebook = __TObject:new{
  guid,
  name,
  updateSequenceNum,
  defaultNotebook,
  serviceCreated,
  serviceUpdated,
  publishing,
  published,
  stack,
  sharedNotebookIds,
  sharedNotebooks,
  businessNotebook,
  contact,
  restrictions
}

function Notebook:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.updateSequenceNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.defaultNotebook = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.serviceCreated = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I64 then
        self.serviceUpdated = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRUCT then
        self.publishing = Publishing:new{}
        self.publishing:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.BOOL then
        self.published = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.stack = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.LIST then
        self.sharedNotebookIds = {}
        local _etype55, _size52 = iprot:readListBegin()
        for _i=1,_size52 do
          _elem56 = iprot:readI64()
          table.insert(self.sharedNotebookIds, _elem56)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.LIST then
        self.sharedNotebooks = {}
        local _etype60, _size57 = iprot:readListBegin()
        for _i=1,_size57 do
          _elem61 = SharedNotebook:new{}
          _elem61:read(iprot)
          table.insert(self.sharedNotebooks, _elem61)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRUCT then
        self.businessNotebook = BusinessNotebook:new{}
        self.businessNotebook:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRUCT then
        self.contact = User:new{}
        self.contact:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRUCT then
        self.restrictions = NotebookRestrictions:new{}
        self.restrictions:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Notebook:write(oprot)
  oprot:writeStructBegin('Notebook')
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 1)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.name then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.updateSequenceNum then
    oprot:writeFieldBegin('updateSequenceNum', TType.I32, 5)
    oprot:writeI32(self.updateSequenceNum)
    oprot:writeFieldEnd()
  end
  if self.defaultNotebook then
    oprot:writeFieldBegin('defaultNotebook', TType.BOOL, 6)
    oprot:writeBool(self.defaultNotebook)
    oprot:writeFieldEnd()
  end
  if self.serviceCreated then
    oprot:writeFieldBegin('serviceCreated', TType.I64, 7)
    oprot:writeI64(self.serviceCreated)
    oprot:writeFieldEnd()
  end
  if self.serviceUpdated then
    oprot:writeFieldBegin('serviceUpdated', TType.I64, 8)
    oprot:writeI64(self.serviceUpdated)
    oprot:writeFieldEnd()
  end
  if self.publishing then
    oprot:writeFieldBegin('publishing', TType.STRUCT, 10)
    self.publishing:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.published then
    oprot:writeFieldBegin('published', TType.BOOL, 11)
    oprot:writeBool(self.published)
    oprot:writeFieldEnd()
  end
  if self.stack then
    oprot:writeFieldBegin('stack', TType.STRING, 12)
    oprot:writeString(self.stack)
    oprot:writeFieldEnd()
  end
  if self.sharedNotebookIds then
    oprot:writeFieldBegin('sharedNotebookIds', TType.LIST, 13)
    oprot:writeListBegin(TType.I64, #self.sharedNotebookIds)
    for _,iter62 in ipairs(self.sharedNotebookIds) do
      oprot:writeI64(iter62)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.sharedNotebooks then
    oprot:writeFieldBegin('sharedNotebooks', TType.LIST, 14)
    oprot:writeListBegin(TType.STRUCT, #self.sharedNotebooks)
    for _,iter63 in ipairs(self.sharedNotebooks) do
      iter63:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.businessNotebook then
    oprot:writeFieldBegin('businessNotebook', TType.STRUCT, 15)
    self.businessNotebook:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.contact then
    oprot:writeFieldBegin('contact', TType.STRUCT, 16)
    self.contact:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.restrictions then
    oprot:writeFieldBegin('restrictions', TType.STRUCT, 17)
    self.restrictions:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LinkedNotebook = __TObject:new{
  shareName,
  username,
  shardId,
  shareKey,
  uri,
  guid,
  updateSequenceNum,
  noteStoreUrl,
  webApiUrlPrefix,
  stack,
  businessId
}

function LinkedNotebook:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.shareName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.shardId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.shareKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.uri = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I32 then
        self.updateSequenceNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.noteStoreUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.webApiUrlPrefix = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.stack = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I32 then
        self.businessId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LinkedNotebook:write(oprot)
  oprot:writeStructBegin('LinkedNotebook')
  if self.shareName then
    oprot:writeFieldBegin('shareName', TType.STRING, 2)
    oprot:writeString(self.shareName)
    oprot:writeFieldEnd()
  end
  if self.username then
    oprot:writeFieldBegin('username', TType.STRING, 3)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  if self.shardId then
    oprot:writeFieldBegin('shardId', TType.STRING, 4)
    oprot:writeString(self.shardId)
    oprot:writeFieldEnd()
  end
  if self.shareKey then
    oprot:writeFieldBegin('shareKey', TType.STRING, 5)
    oprot:writeString(self.shareKey)
    oprot:writeFieldEnd()
  end
  if self.uri then
    oprot:writeFieldBegin('uri', TType.STRING, 6)
    oprot:writeString(self.uri)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 7)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.updateSequenceNum then
    oprot:writeFieldBegin('updateSequenceNum', TType.I32, 8)
    oprot:writeI32(self.updateSequenceNum)
    oprot:writeFieldEnd()
  end
  if self.noteStoreUrl then
    oprot:writeFieldBegin('noteStoreUrl', TType.STRING, 9)
    oprot:writeString(self.noteStoreUrl)
    oprot:writeFieldEnd()
  end
  if self.webApiUrlPrefix then
    oprot:writeFieldBegin('webApiUrlPrefix', TType.STRING, 10)
    oprot:writeString(self.webApiUrlPrefix)
    oprot:writeFieldEnd()
  end
  if self.stack then
    oprot:writeFieldBegin('stack', TType.STRING, 11)
    oprot:writeString(self.stack)
    oprot:writeFieldEnd()
  end
  if self.businessId then
    oprot:writeFieldBegin('businessId', TType.I32, 12)
    oprot:writeI32(self.businessId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotebookDescriptor = __TObject:new{
  guid,
  notebookDisplayName,
  contactName,
  hasSharedNotebook,
  joinedUserCount
}

function NotebookDescriptor:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.notebookDisplayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.contactName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.hasSharedNotebook = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.joinedUserCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotebookDescriptor:write(oprot)
  oprot:writeStructBegin('NotebookDescriptor')
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 1)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.notebookDisplayName then
    oprot:writeFieldBegin('notebookDisplayName', TType.STRING, 2)
    oprot:writeString(self.notebookDisplayName)
    oprot:writeFieldEnd()
  end
  if self.contactName then
    oprot:writeFieldBegin('contactName', TType.STRING, 3)
    oprot:writeString(self.contactName)
    oprot:writeFieldEnd()
  end
  if self.hasSharedNotebook then
    oprot:writeFieldBegin('hasSharedNotebook', TType.BOOL, 4)
    oprot:writeBool(self.hasSharedNotebook)
    oprot:writeFieldEnd()
  end
  if self.joinedUserCount then
    oprot:writeFieldBegin('joinedUserCount', TType.I32, 5)
    oprot:writeI32(self.joinedUserCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
