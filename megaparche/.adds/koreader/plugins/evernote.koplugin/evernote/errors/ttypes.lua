--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'thrift.Thrift'
require 'evernote.errors.constants'

EDAMErrorCode = {
  UNKNOWN = 1,
  BAD_DATA_FORMAT = 2,
  PERMISSION_DENIED = 3,
  INTERNAL_ERROR = 4,
  DATA_REQUIRED = 5,
  LIMIT_REACHED = 6,
  QUOTA_REACHED = 7,
  INVALID_AUTH = 8,
  AUTH_EXPIRED = 9,
  DATA_CONFLICT = 10,
  ENML_VALIDATION = 11,
  SHARD_UNAVAILABLE = 12,
  LEN_TOO_SHORT = 13,
  LEN_TOO_LONG = 14,
  TOO_FEW = 15,
  TOO_MANY = 16,
  UNSUPPORTED_OPERATION = 17,
  TAKEN_DOWN = 18,
  RATE_LIMIT_REACHED = 19
}

EDAMUserException = TException:new{
  __type = 'EDAMUserException',
  errorCode,
  parameter
}

function EDAMUserException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.errorCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.parameter = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EDAMUserException:write(oprot)
  oprot:writeStructBegin('EDAMUserException')
  if self.errorCode then
    oprot:writeFieldBegin('errorCode', TType.I32, 1)
    oprot:writeI32(self.errorCode)
    oprot:writeFieldEnd()
  end
  if self.parameter then
    oprot:writeFieldBegin('parameter', TType.STRING, 2)
    oprot:writeString(self.parameter)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EDAMSystemException = TException:new{
  __type = 'EDAMSystemException',
  errorCode,
  message,
  rateLimitDuration
}

function EDAMSystemException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.errorCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.message = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.rateLimitDuration = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EDAMSystemException:write(oprot)
  oprot:writeStructBegin('EDAMSystemException')
  if self.errorCode then
    oprot:writeFieldBegin('errorCode', TType.I32, 1)
    oprot:writeI32(self.errorCode)
    oprot:writeFieldEnd()
  end
  if self.message then
    oprot:writeFieldBegin('message', TType.STRING, 2)
    oprot:writeString(self.message)
    oprot:writeFieldEnd()
  end
  if self.rateLimitDuration then
    oprot:writeFieldBegin('rateLimitDuration', TType.I32, 3)
    oprot:writeI32(self.rateLimitDuration)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EDAMNotFoundException = TException:new{
  __type = 'EDAMNotFoundException',
  identifier,
  key
}

function EDAMNotFoundException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.identifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EDAMNotFoundException:write(oprot)
  oprot:writeStructBegin('EDAMNotFoundException')
  if self.identifier then
    oprot:writeFieldBegin('identifier', TType.STRING, 1)
    oprot:writeString(self.identifier)
    oprot:writeFieldEnd()
  end
  if self.key then
    oprot:writeFieldBegin('key', TType.STRING, 2)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
