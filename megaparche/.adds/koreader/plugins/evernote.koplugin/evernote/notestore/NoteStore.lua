--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'thrift.Thrift'
require 'evernote.types.ttypes'
require 'evernote.errors.ttypes'
require 'evernote.limits.ttypes'
require 'evernote.notestore.ttypes'

NoteStoreClient = __TObject.new(__TClient, {
  __type = 'NoteStoreClient'
})

function NoteStoreClient:getSyncState(authenticationToken)
  self:send_getSyncState(authenticationToken)
  return self:recv_getSyncState(authenticationToken)
end

function NoteStoreClient:send_getSyncState(authenticationToken)
  self.oprot:writeMessageBegin('getSyncState', TMessageType.CALL, self._seqid)
  local args = getSyncState_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getSyncState(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSyncState_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getSyncStateWithMetrics(authenticationToken, clientMetrics)
  self:send_getSyncStateWithMetrics(authenticationToken, clientMetrics)
  return self:recv_getSyncStateWithMetrics(authenticationToken, clientMetrics)
end

function NoteStoreClient:send_getSyncStateWithMetrics(authenticationToken, clientMetrics)
  self.oprot:writeMessageBegin('getSyncStateWithMetrics', TMessageType.CALL, self._seqid)
  local args = getSyncStateWithMetrics_args:new{}
  args.authenticationToken = authenticationToken
  args.clientMetrics = clientMetrics
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getSyncStateWithMetrics(authenticationToken, clientMetrics)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSyncStateWithMetrics_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly)
  self:send_getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly)
  return self:recv_getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly)
end

function NoteStoreClient:send_getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly)
  self.oprot:writeMessageBegin('getSyncChunk', TMessageType.CALL, self._seqid)
  local args = getSyncChunk_args:new{}
  args.authenticationToken = authenticationToken
  args.afterUSN = afterUSN
  args.maxEntries = maxEntries
  args.fullSyncOnly = fullSyncOnly
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSyncChunk_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter)
  self:send_getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter)
  return self:recv_getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter)
end

function NoteStoreClient:send_getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter)
  self.oprot:writeMessageBegin('getFilteredSyncChunk', TMessageType.CALL, self._seqid)
  local args = getFilteredSyncChunk_args:new{}
  args.authenticationToken = authenticationToken
  args.afterUSN = afterUSN
  args.maxEntries = maxEntries
  args.filter = filter
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getFilteredSyncChunk_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getLinkedNotebookSyncState(authenticationToken, linkedNotebook)
  self:send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook)
  return self:recv_getLinkedNotebookSyncState(authenticationToken, linkedNotebook)
end

function NoteStoreClient:send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook)
  self.oprot:writeMessageBegin('getLinkedNotebookSyncState', TMessageType.CALL, self._seqid)
  local args = getLinkedNotebookSyncState_args:new{}
  args.authenticationToken = authenticationToken
  args.linkedNotebook = linkedNotebook
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getLinkedNotebookSyncState(authenticationToken, linkedNotebook)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getLinkedNotebookSyncState_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly)
  self:send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly)
  return self:recv_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly)
end

function NoteStoreClient:send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly)
  self.oprot:writeMessageBegin('getLinkedNotebookSyncChunk', TMessageType.CALL, self._seqid)
  local args = getLinkedNotebookSyncChunk_args:new{}
  args.authenticationToken = authenticationToken
  args.linkedNotebook = linkedNotebook
  args.afterUSN = afterUSN
  args.maxEntries = maxEntries
  args.fullSyncOnly = fullSyncOnly
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getLinkedNotebookSyncChunk_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:listNotebooks(authenticationToken)
  self:send_listNotebooks(authenticationToken)
  return self:recv_listNotebooks(authenticationToken)
end

function NoteStoreClient:send_listNotebooks(authenticationToken)
  self.oprot:writeMessageBegin('listNotebooks', TMessageType.CALL, self._seqid)
  local args = listNotebooks_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_listNotebooks(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = listNotebooks_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getNotebook(authenticationToken, guid)
  self:send_getNotebook(authenticationToken, guid)
  return self:recv_getNotebook(authenticationToken, guid)
end

function NoteStoreClient:send_getNotebook(authenticationToken, guid)
  self.oprot:writeMessageBegin('getNotebook', TMessageType.CALL, self._seqid)
  local args = getNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getNotebook(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getDefaultNotebook(authenticationToken)
  self:send_getDefaultNotebook(authenticationToken)
  return self:recv_getDefaultNotebook(authenticationToken)
end

function NoteStoreClient:send_getDefaultNotebook(authenticationToken)
  self.oprot:writeMessageBegin('getDefaultNotebook', TMessageType.CALL, self._seqid)
  local args = getDefaultNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getDefaultNotebook(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getDefaultNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:createNotebook(authenticationToken, notebook)
  self:send_createNotebook(authenticationToken, notebook)
  return self:recv_createNotebook(authenticationToken, notebook)
end

function NoteStoreClient:send_createNotebook(authenticationToken, notebook)
  self.oprot:writeMessageBegin('createNotebook', TMessageType.CALL, self._seqid)
  local args = createNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args.notebook = notebook
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_createNotebook(authenticationToken, notebook)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = createNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:updateNotebook(authenticationToken, notebook)
  self:send_updateNotebook(authenticationToken, notebook)
  return self:recv_updateNotebook(authenticationToken, notebook)
end

function NoteStoreClient:send_updateNotebook(authenticationToken, notebook)
  self.oprot:writeMessageBegin('updateNotebook', TMessageType.CALL, self._seqid)
  local args = updateNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args.notebook = notebook
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_updateNotebook(authenticationToken, notebook)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:expungeNotebook(authenticationToken, guid)
  self:send_expungeNotebook(authenticationToken, guid)
  return self:recv_expungeNotebook(authenticationToken, guid)
end

function NoteStoreClient:send_expungeNotebook(authenticationToken, guid)
  self.oprot:writeMessageBegin('expungeNotebook', TMessageType.CALL, self._seqid)
  local args = expungeNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_expungeNotebook(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = expungeNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:listTags(authenticationToken)
  self:send_listTags(authenticationToken)
  return self:recv_listTags(authenticationToken)
end

function NoteStoreClient:send_listTags(authenticationToken)
  self.oprot:writeMessageBegin('listTags', TMessageType.CALL, self._seqid)
  local args = listTags_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_listTags(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = listTags_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:listTagsByNotebook(authenticationToken, notebookGuid)
  self:send_listTagsByNotebook(authenticationToken, notebookGuid)
  return self:recv_listTagsByNotebook(authenticationToken, notebookGuid)
end

function NoteStoreClient:send_listTagsByNotebook(authenticationToken, notebookGuid)
  self.oprot:writeMessageBegin('listTagsByNotebook', TMessageType.CALL, self._seqid)
  local args = listTagsByNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args.notebookGuid = notebookGuid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_listTagsByNotebook(authenticationToken, notebookGuid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = listTagsByNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getTag(authenticationToken, guid)
  self:send_getTag(authenticationToken, guid)
  return self:recv_getTag(authenticationToken, guid)
end

function NoteStoreClient:send_getTag(authenticationToken, guid)
  self.oprot:writeMessageBegin('getTag', TMessageType.CALL, self._seqid)
  local args = getTag_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getTag(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getTag_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:createTag(authenticationToken, tag)
  self:send_createTag(authenticationToken, tag)
  return self:recv_createTag(authenticationToken, tag)
end

function NoteStoreClient:send_createTag(authenticationToken, tag)
  self.oprot:writeMessageBegin('createTag', TMessageType.CALL, self._seqid)
  local args = createTag_args:new{}
  args.authenticationToken = authenticationToken
  args.tag = tag
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_createTag(authenticationToken, tag)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = createTag_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:updateTag(authenticationToken, tag)
  self:send_updateTag(authenticationToken, tag)
  return self:recv_updateTag(authenticationToken, tag)
end

function NoteStoreClient:send_updateTag(authenticationToken, tag)
  self.oprot:writeMessageBegin('updateTag', TMessageType.CALL, self._seqid)
  local args = updateTag_args:new{}
  args.authenticationToken = authenticationToken
  args.tag = tag
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_updateTag(authenticationToken, tag)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateTag_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:untagAll(authenticationToken, guid)
  self:send_untagAll(authenticationToken, guid)
  self:recv_untagAll(authenticationToken, guid)
end

function NoteStoreClient:send_untagAll(authenticationToken, guid)
  self.oprot:writeMessageBegin('untagAll', TMessageType.CALL, self._seqid)
  local args = untagAll_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_untagAll(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = untagAll_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function NoteStoreClient:expungeTag(authenticationToken, guid)
  self:send_expungeTag(authenticationToken, guid)
  return self:recv_expungeTag(authenticationToken, guid)
end

function NoteStoreClient:send_expungeTag(authenticationToken, guid)
  self.oprot:writeMessageBegin('expungeTag', TMessageType.CALL, self._seqid)
  local args = expungeTag_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_expungeTag(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = expungeTag_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:listSearches(authenticationToken)
  self:send_listSearches(authenticationToken)
  return self:recv_listSearches(authenticationToken)
end

function NoteStoreClient:send_listSearches(authenticationToken)
  self.oprot:writeMessageBegin('listSearches', TMessageType.CALL, self._seqid)
  local args = listSearches_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_listSearches(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = listSearches_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getSearch(authenticationToken, guid)
  self:send_getSearch(authenticationToken, guid)
  return self:recv_getSearch(authenticationToken, guid)
end

function NoteStoreClient:send_getSearch(authenticationToken, guid)
  self.oprot:writeMessageBegin('getSearch', TMessageType.CALL, self._seqid)
  local args = getSearch_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getSearch(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSearch_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:createSearch(authenticationToken, search)
  self:send_createSearch(authenticationToken, search)
  return self:recv_createSearch(authenticationToken, search)
end

function NoteStoreClient:send_createSearch(authenticationToken, search)
  self.oprot:writeMessageBegin('createSearch', TMessageType.CALL, self._seqid)
  local args = createSearch_args:new{}
  args.authenticationToken = authenticationToken
  args.search = search
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_createSearch(authenticationToken, search)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = createSearch_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:updateSearch(authenticationToken, search)
  self:send_updateSearch(authenticationToken, search)
  return self:recv_updateSearch(authenticationToken, search)
end

function NoteStoreClient:send_updateSearch(authenticationToken, search)
  self.oprot:writeMessageBegin('updateSearch', TMessageType.CALL, self._seqid)
  local args = updateSearch_args:new{}
  args.authenticationToken = authenticationToken
  args.search = search
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_updateSearch(authenticationToken, search)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateSearch_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:expungeSearch(authenticationToken, guid)
  self:send_expungeSearch(authenticationToken, guid)
  return self:recv_expungeSearch(authenticationToken, guid)
end

function NoteStoreClient:send_expungeSearch(authenticationToken, guid)
  self.oprot:writeMessageBegin('expungeSearch', TMessageType.CALL, self._seqid)
  local args = expungeSearch_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_expungeSearch(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = expungeSearch_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:findNotes(authenticationToken, filter, offset, maxNotes)
  self:send_findNotes(authenticationToken, filter, offset, maxNotes)
  return self:recv_findNotes(authenticationToken, filter, offset, maxNotes)
end

function NoteStoreClient:send_findNotes(authenticationToken, filter, offset, maxNotes)
  self.oprot:writeMessageBegin('findNotes', TMessageType.CALL, self._seqid)
  local args = findNotes_args:new{}
  args.authenticationToken = authenticationToken
  args.filter = filter
  args.offset = offset
  args.maxNotes = maxNotes
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_findNotes(authenticationToken, filter, offset, maxNotes)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = findNotes_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:findNoteOffset(authenticationToken, filter, guid)
  self:send_findNoteOffset(authenticationToken, filter, guid)
  return self:recv_findNoteOffset(authenticationToken, filter, guid)
end

function NoteStoreClient:send_findNoteOffset(authenticationToken, filter, guid)
  self.oprot:writeMessageBegin('findNoteOffset', TMessageType.CALL, self._seqid)
  local args = findNoteOffset_args:new{}
  args.authenticationToken = authenticationToken
  args.filter = filter
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_findNoteOffset(authenticationToken, filter, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = findNoteOffset_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec)
  self:send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec)
  return self:recv_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec)
end

function NoteStoreClient:send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec)
  self.oprot:writeMessageBegin('findNotesMetadata', TMessageType.CALL, self._seqid)
  local args = findNotesMetadata_args:new{}
  args.authenticationToken = authenticationToken
  args.filter = filter
  args.offset = offset
  args.maxNotes = maxNotes
  args.resultSpec = resultSpec
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = findNotesMetadata_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:findNoteCounts(authenticationToken, filter, withTrash)
  self:send_findNoteCounts(authenticationToken, filter, withTrash)
  return self:recv_findNoteCounts(authenticationToken, filter, withTrash)
end

function NoteStoreClient:send_findNoteCounts(authenticationToken, filter, withTrash)
  self.oprot:writeMessageBegin('findNoteCounts', TMessageType.CALL, self._seqid)
  local args = findNoteCounts_args:new{}
  args.authenticationToken = authenticationToken
  args.filter = filter
  args.withTrash = withTrash
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_findNoteCounts(authenticationToken, filter, withTrash)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = findNoteCounts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
  self:send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
  return self:recv_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
end

function NoteStoreClient:send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
  self.oprot:writeMessageBegin('getNote', TMessageType.CALL, self._seqid)
  local args = getNote_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.withContent = withContent
  args.withResourcesData = withResourcesData
  args.withResourcesRecognition = withResourcesRecognition
  args.withResourcesAlternateData = withResourcesAlternateData
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNote_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getNoteApplicationData(authenticationToken, guid)
  self:send_getNoteApplicationData(authenticationToken, guid)
  return self:recv_getNoteApplicationData(authenticationToken, guid)
end

function NoteStoreClient:send_getNoteApplicationData(authenticationToken, guid)
  self.oprot:writeMessageBegin('getNoteApplicationData', TMessageType.CALL, self._seqid)
  local args = getNoteApplicationData_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getNoteApplicationData(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNoteApplicationData_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getNoteApplicationDataEntry(authenticationToken, guid, key)
  self:send_getNoteApplicationDataEntry(authenticationToken, guid, key)
  return self:recv_getNoteApplicationDataEntry(authenticationToken, guid, key)
end

function NoteStoreClient:send_getNoteApplicationDataEntry(authenticationToken, guid, key)
  self.oprot:writeMessageBegin('getNoteApplicationDataEntry', TMessageType.CALL, self._seqid)
  local args = getNoteApplicationDataEntry_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.key = key
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getNoteApplicationDataEntry(authenticationToken, guid, key)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNoteApplicationDataEntry_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:setNoteApplicationDataEntry(authenticationToken, guid, key, value)
  self:send_setNoteApplicationDataEntry(authenticationToken, guid, key, value)
  return self:recv_setNoteApplicationDataEntry(authenticationToken, guid, key, value)
end

function NoteStoreClient:send_setNoteApplicationDataEntry(authenticationToken, guid, key, value)
  self.oprot:writeMessageBegin('setNoteApplicationDataEntry', TMessageType.CALL, self._seqid)
  local args = setNoteApplicationDataEntry_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.key = key
  args.value = value
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_setNoteApplicationDataEntry(authenticationToken, guid, key, value)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = setNoteApplicationDataEntry_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:unsetNoteApplicationDataEntry(authenticationToken, guid, key)
  self:send_unsetNoteApplicationDataEntry(authenticationToken, guid, key)
  return self:recv_unsetNoteApplicationDataEntry(authenticationToken, guid, key)
end

function NoteStoreClient:send_unsetNoteApplicationDataEntry(authenticationToken, guid, key)
  self.oprot:writeMessageBegin('unsetNoteApplicationDataEntry', TMessageType.CALL, self._seqid)
  local args = unsetNoteApplicationDataEntry_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.key = key
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_unsetNoteApplicationDataEntry(authenticationToken, guid, key)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = unsetNoteApplicationDataEntry_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getNoteContent(authenticationToken, guid)
  self:send_getNoteContent(authenticationToken, guid)
  return self:recv_getNoteContent(authenticationToken, guid)
end

function NoteStoreClient:send_getNoteContent(authenticationToken, guid)
  self.oprot:writeMessageBegin('getNoteContent', TMessageType.CALL, self._seqid)
  local args = getNoteContent_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getNoteContent(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNoteContent_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing)
  self:send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing)
  return self:recv_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing)
end

function NoteStoreClient:send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing)
  self.oprot:writeMessageBegin('getNoteSearchText', TMessageType.CALL, self._seqid)
  local args = getNoteSearchText_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.noteOnly = noteOnly
  args.tokenizeForIndexing = tokenizeForIndexing
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNoteSearchText_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getResourceSearchText(authenticationToken, guid)
  self:send_getResourceSearchText(authenticationToken, guid)
  return self:recv_getResourceSearchText(authenticationToken, guid)
end

function NoteStoreClient:send_getResourceSearchText(authenticationToken, guid)
  self.oprot:writeMessageBegin('getResourceSearchText', TMessageType.CALL, self._seqid)
  local args = getResourceSearchText_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getResourceSearchText(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getResourceSearchText_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getNoteTagNames(authenticationToken, guid)
  self:send_getNoteTagNames(authenticationToken, guid)
  return self:recv_getNoteTagNames(authenticationToken, guid)
end

function NoteStoreClient:send_getNoteTagNames(authenticationToken, guid)
  self.oprot:writeMessageBegin('getNoteTagNames', TMessageType.CALL, self._seqid)
  local args = getNoteTagNames_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getNoteTagNames(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNoteTagNames_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:createNote(authenticationToken, note)
  self:send_createNote(authenticationToken, note)
  return self:recv_createNote(authenticationToken, note)
end

function NoteStoreClient:send_createNote(authenticationToken, note)
  self.oprot:writeMessageBegin('createNote', TMessageType.CALL, self._seqid)
  local args = createNote_args:new{}
  args.authenticationToken = authenticationToken
  args.note = note
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_createNote(authenticationToken, note)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = createNote_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:updateNote(authenticationToken, note)
  self:send_updateNote(authenticationToken, note)
  return self:recv_updateNote(authenticationToken, note)
end

function NoteStoreClient:send_updateNote(authenticationToken, note)
  self.oprot:writeMessageBegin('updateNote', TMessageType.CALL, self._seqid)
  local args = updateNote_args:new{}
  args.authenticationToken = authenticationToken
  args.note = note
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_updateNote(authenticationToken, note)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateNote_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:deleteNote(authenticationToken, guid)
  self:send_deleteNote(authenticationToken, guid)
  return self:recv_deleteNote(authenticationToken, guid)
end

function NoteStoreClient:send_deleteNote(authenticationToken, guid)
  self.oprot:writeMessageBegin('deleteNote', TMessageType.CALL, self._seqid)
  local args = deleteNote_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_deleteNote(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = deleteNote_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:expungeNote(authenticationToken, guid)
  self:send_expungeNote(authenticationToken, guid)
  return self:recv_expungeNote(authenticationToken, guid)
end

function NoteStoreClient:send_expungeNote(authenticationToken, guid)
  self.oprot:writeMessageBegin('expungeNote', TMessageType.CALL, self._seqid)
  local args = expungeNote_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_expungeNote(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = expungeNote_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:expungeNotes(authenticationToken, noteGuids)
  self:send_expungeNotes(authenticationToken, noteGuids)
  return self:recv_expungeNotes(authenticationToken, noteGuids)
end

function NoteStoreClient:send_expungeNotes(authenticationToken, noteGuids)
  self.oprot:writeMessageBegin('expungeNotes', TMessageType.CALL, self._seqid)
  local args = expungeNotes_args:new{}
  args.authenticationToken = authenticationToken
  args.noteGuids = noteGuids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_expungeNotes(authenticationToken, noteGuids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = expungeNotes_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:expungeInactiveNotes(authenticationToken)
  self:send_expungeInactiveNotes(authenticationToken)
  return self:recv_expungeInactiveNotes(authenticationToken)
end

function NoteStoreClient:send_expungeInactiveNotes(authenticationToken)
  self.oprot:writeMessageBegin('expungeInactiveNotes', TMessageType.CALL, self._seqid)
  local args = expungeInactiveNotes_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_expungeInactiveNotes(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = expungeInactiveNotes_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:copyNote(authenticationToken, noteGuid, toNotebookGuid)
  self:send_copyNote(authenticationToken, noteGuid, toNotebookGuid)
  return self:recv_copyNote(authenticationToken, noteGuid, toNotebookGuid)
end

function NoteStoreClient:send_copyNote(authenticationToken, noteGuid, toNotebookGuid)
  self.oprot:writeMessageBegin('copyNote', TMessageType.CALL, self._seqid)
  local args = copyNote_args:new{}
  args.authenticationToken = authenticationToken
  args.noteGuid = noteGuid
  args.toNotebookGuid = toNotebookGuid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_copyNote(authenticationToken, noteGuid, toNotebookGuid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = copyNote_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:listNoteVersions(authenticationToken, noteGuid)
  self:send_listNoteVersions(authenticationToken, noteGuid)
  return self:recv_listNoteVersions(authenticationToken, noteGuid)
end

function NoteStoreClient:send_listNoteVersions(authenticationToken, noteGuid)
  self.oprot:writeMessageBegin('listNoteVersions', TMessageType.CALL, self._seqid)
  local args = listNoteVersions_args:new{}
  args.authenticationToken = authenticationToken
  args.noteGuid = noteGuid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_listNoteVersions(authenticationToken, noteGuid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = listNoteVersions_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
  self:send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
  return self:recv_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
end

function NoteStoreClient:send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
  self.oprot:writeMessageBegin('getNoteVersion', TMessageType.CALL, self._seqid)
  local args = getNoteVersion_args:new{}
  args.authenticationToken = authenticationToken
  args.noteGuid = noteGuid
  args.updateSequenceNum = updateSequenceNum
  args.withResourcesData = withResourcesData
  args.withResourcesRecognition = withResourcesRecognition
  args.withResourcesAlternateData = withResourcesAlternateData
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNoteVersion_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData)
  self:send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData)
  return self:recv_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData)
end

function NoteStoreClient:send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData)
  self.oprot:writeMessageBegin('getResource', TMessageType.CALL, self._seqid)
  local args = getResource_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.withData = withData
  args.withRecognition = withRecognition
  args.withAttributes = withAttributes
  args.withAlternateData = withAlternateData
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getResource_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getResourceApplicationData(authenticationToken, guid)
  self:send_getResourceApplicationData(authenticationToken, guid)
  return self:recv_getResourceApplicationData(authenticationToken, guid)
end

function NoteStoreClient:send_getResourceApplicationData(authenticationToken, guid)
  self.oprot:writeMessageBegin('getResourceApplicationData', TMessageType.CALL, self._seqid)
  local args = getResourceApplicationData_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getResourceApplicationData(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getResourceApplicationData_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getResourceApplicationDataEntry(authenticationToken, guid, key)
  self:send_getResourceApplicationDataEntry(authenticationToken, guid, key)
  return self:recv_getResourceApplicationDataEntry(authenticationToken, guid, key)
end

function NoteStoreClient:send_getResourceApplicationDataEntry(authenticationToken, guid, key)
  self.oprot:writeMessageBegin('getResourceApplicationDataEntry', TMessageType.CALL, self._seqid)
  local args = getResourceApplicationDataEntry_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.key = key
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getResourceApplicationDataEntry(authenticationToken, guid, key)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getResourceApplicationDataEntry_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:setResourceApplicationDataEntry(authenticationToken, guid, key, value)
  self:send_setResourceApplicationDataEntry(authenticationToken, guid, key, value)
  return self:recv_setResourceApplicationDataEntry(authenticationToken, guid, key, value)
end

function NoteStoreClient:send_setResourceApplicationDataEntry(authenticationToken, guid, key, value)
  self.oprot:writeMessageBegin('setResourceApplicationDataEntry', TMessageType.CALL, self._seqid)
  local args = setResourceApplicationDataEntry_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.key = key
  args.value = value
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_setResourceApplicationDataEntry(authenticationToken, guid, key, value)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = setResourceApplicationDataEntry_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:unsetResourceApplicationDataEntry(authenticationToken, guid, key)
  self:send_unsetResourceApplicationDataEntry(authenticationToken, guid, key)
  return self:recv_unsetResourceApplicationDataEntry(authenticationToken, guid, key)
end

function NoteStoreClient:send_unsetResourceApplicationDataEntry(authenticationToken, guid, key)
  self.oprot:writeMessageBegin('unsetResourceApplicationDataEntry', TMessageType.CALL, self._seqid)
  local args = unsetResourceApplicationDataEntry_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.key = key
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_unsetResourceApplicationDataEntry(authenticationToken, guid, key)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = unsetResourceApplicationDataEntry_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:updateResource(authenticationToken, resource)
  self:send_updateResource(authenticationToken, resource)
  return self:recv_updateResource(authenticationToken, resource)
end

function NoteStoreClient:send_updateResource(authenticationToken, resource)
  self.oprot:writeMessageBegin('updateResource', TMessageType.CALL, self._seqid)
  local args = updateResource_args:new{}
  args.authenticationToken = authenticationToken
  args.resource = resource
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_updateResource(authenticationToken, resource)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateResource_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getResourceData(authenticationToken, guid)
  self:send_getResourceData(authenticationToken, guid)
  return self:recv_getResourceData(authenticationToken, guid)
end

function NoteStoreClient:send_getResourceData(authenticationToken, guid)
  self.oprot:writeMessageBegin('getResourceData', TMessageType.CALL, self._seqid)
  local args = getResourceData_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getResourceData(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getResourceData_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData)
  self:send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData)
  return self:recv_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData)
end

function NoteStoreClient:send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData)
  self.oprot:writeMessageBegin('getResourceByHash', TMessageType.CALL, self._seqid)
  local args = getResourceByHash_args:new{}
  args.authenticationToken = authenticationToken
  args.noteGuid = noteGuid
  args.contentHash = contentHash
  args.withData = withData
  args.withRecognition = withRecognition
  args.withAlternateData = withAlternateData
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getResourceByHash_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getResourceRecognition(authenticationToken, guid)
  self:send_getResourceRecognition(authenticationToken, guid)
  return self:recv_getResourceRecognition(authenticationToken, guid)
end

function NoteStoreClient:send_getResourceRecognition(authenticationToken, guid)
  self.oprot:writeMessageBegin('getResourceRecognition', TMessageType.CALL, self._seqid)
  local args = getResourceRecognition_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getResourceRecognition(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getResourceRecognition_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getResourceAlternateData(authenticationToken, guid)
  self:send_getResourceAlternateData(authenticationToken, guid)
  return self:recv_getResourceAlternateData(authenticationToken, guid)
end

function NoteStoreClient:send_getResourceAlternateData(authenticationToken, guid)
  self.oprot:writeMessageBegin('getResourceAlternateData', TMessageType.CALL, self._seqid)
  local args = getResourceAlternateData_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getResourceAlternateData(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getResourceAlternateData_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getResourceAttributes(authenticationToken, guid)
  self:send_getResourceAttributes(authenticationToken, guid)
  return self:recv_getResourceAttributes(authenticationToken, guid)
end

function NoteStoreClient:send_getResourceAttributes(authenticationToken, guid)
  self.oprot:writeMessageBegin('getResourceAttributes', TMessageType.CALL, self._seqid)
  local args = getResourceAttributes_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getResourceAttributes(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getResourceAttributes_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getPublicNotebook(userId, publicUri)
  self:send_getPublicNotebook(userId, publicUri)
  return self:recv_getPublicNotebook(userId, publicUri)
end

function NoteStoreClient:send_getPublicNotebook(userId, publicUri)
  self.oprot:writeMessageBegin('getPublicNotebook', TMessageType.CALL, self._seqid)
  local args = getPublicNotebook_args:new{}
  args.userId = userId
  args.publicUri = publicUri
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getPublicNotebook(userId, publicUri)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPublicNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:createSharedNotebook(authenticationToken, sharedNotebook)
  self:send_createSharedNotebook(authenticationToken, sharedNotebook)
  return self:recv_createSharedNotebook(authenticationToken, sharedNotebook)
end

function NoteStoreClient:send_createSharedNotebook(authenticationToken, sharedNotebook)
  self.oprot:writeMessageBegin('createSharedNotebook', TMessageType.CALL, self._seqid)
  local args = createSharedNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args.sharedNotebook = sharedNotebook
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_createSharedNotebook(authenticationToken, sharedNotebook)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = createSharedNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:updateSharedNotebook(authenticationToken, sharedNotebook)
  self:send_updateSharedNotebook(authenticationToken, sharedNotebook)
  return self:recv_updateSharedNotebook(authenticationToken, sharedNotebook)
end

function NoteStoreClient:send_updateSharedNotebook(authenticationToken, sharedNotebook)
  self.oprot:writeMessageBegin('updateSharedNotebook', TMessageType.CALL, self._seqid)
  local args = updateSharedNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args.sharedNotebook = sharedNotebook
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_updateSharedNotebook(authenticationToken, sharedNotebook)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateSharedNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:setSharedNotebookRecipientSettings(authenticationToken, sharedNotebookId, recipientSettings)
  self:send_setSharedNotebookRecipientSettings(authenticationToken, sharedNotebookId, recipientSettings)
  return self:recv_setSharedNotebookRecipientSettings(authenticationToken, sharedNotebookId, recipientSettings)
end

function NoteStoreClient:send_setSharedNotebookRecipientSettings(authenticationToken, sharedNotebookId, recipientSettings)
  self.oprot:writeMessageBegin('setSharedNotebookRecipientSettings', TMessageType.CALL, self._seqid)
  local args = setSharedNotebookRecipientSettings_args:new{}
  args.authenticationToken = authenticationToken
  args.sharedNotebookId = sharedNotebookId
  args.recipientSettings = recipientSettings
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_setSharedNotebookRecipientSettings(authenticationToken, sharedNotebookId, recipientSettings)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = setSharedNotebookRecipientSettings_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:sendMessageToSharedNotebookMembers(authenticationToken, notebookGuid, messageText, recipients)
  self:send_sendMessageToSharedNotebookMembers(authenticationToken, notebookGuid, messageText, recipients)
  return self:recv_sendMessageToSharedNotebookMembers(authenticationToken, notebookGuid, messageText, recipients)
end

function NoteStoreClient:send_sendMessageToSharedNotebookMembers(authenticationToken, notebookGuid, messageText, recipients)
  self.oprot:writeMessageBegin('sendMessageToSharedNotebookMembers', TMessageType.CALL, self._seqid)
  local args = sendMessageToSharedNotebookMembers_args:new{}
  args.authenticationToken = authenticationToken
  args.notebookGuid = notebookGuid
  args.messageText = messageText
  args.recipients = recipients
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_sendMessageToSharedNotebookMembers(authenticationToken, notebookGuid, messageText, recipients)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = sendMessageToSharedNotebookMembers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:listSharedNotebooks(authenticationToken)
  self:send_listSharedNotebooks(authenticationToken)
  return self:recv_listSharedNotebooks(authenticationToken)
end

function NoteStoreClient:send_listSharedNotebooks(authenticationToken)
  self.oprot:writeMessageBegin('listSharedNotebooks', TMessageType.CALL, self._seqid)
  local args = listSharedNotebooks_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_listSharedNotebooks(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = listSharedNotebooks_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:expungeSharedNotebooks(authenticationToken, sharedNotebookIds)
  self:send_expungeSharedNotebooks(authenticationToken, sharedNotebookIds)
  return self:recv_expungeSharedNotebooks(authenticationToken, sharedNotebookIds)
end

function NoteStoreClient:send_expungeSharedNotebooks(authenticationToken, sharedNotebookIds)
  self.oprot:writeMessageBegin('expungeSharedNotebooks', TMessageType.CALL, self._seqid)
  local args = expungeSharedNotebooks_args:new{}
  args.authenticationToken = authenticationToken
  args.sharedNotebookIds = sharedNotebookIds
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_expungeSharedNotebooks(authenticationToken, sharedNotebookIds)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = expungeSharedNotebooks_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:createLinkedNotebook(authenticationToken, linkedNotebook)
  self:send_createLinkedNotebook(authenticationToken, linkedNotebook)
  return self:recv_createLinkedNotebook(authenticationToken, linkedNotebook)
end

function NoteStoreClient:send_createLinkedNotebook(authenticationToken, linkedNotebook)
  self.oprot:writeMessageBegin('createLinkedNotebook', TMessageType.CALL, self._seqid)
  local args = createLinkedNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args.linkedNotebook = linkedNotebook
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_createLinkedNotebook(authenticationToken, linkedNotebook)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = createLinkedNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:updateLinkedNotebook(authenticationToken, linkedNotebook)
  self:send_updateLinkedNotebook(authenticationToken, linkedNotebook)
  return self:recv_updateLinkedNotebook(authenticationToken, linkedNotebook)
end

function NoteStoreClient:send_updateLinkedNotebook(authenticationToken, linkedNotebook)
  self.oprot:writeMessageBegin('updateLinkedNotebook', TMessageType.CALL, self._seqid)
  local args = updateLinkedNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args.linkedNotebook = linkedNotebook
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_updateLinkedNotebook(authenticationToken, linkedNotebook)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateLinkedNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:listLinkedNotebooks(authenticationToken)
  self:send_listLinkedNotebooks(authenticationToken)
  return self:recv_listLinkedNotebooks(authenticationToken)
end

function NoteStoreClient:send_listLinkedNotebooks(authenticationToken)
  self.oprot:writeMessageBegin('listLinkedNotebooks', TMessageType.CALL, self._seqid)
  local args = listLinkedNotebooks_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_listLinkedNotebooks(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = listLinkedNotebooks_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:expungeLinkedNotebook(authenticationToken, guid)
  self:send_expungeLinkedNotebook(authenticationToken, guid)
  return self:recv_expungeLinkedNotebook(authenticationToken, guid)
end

function NoteStoreClient:send_expungeLinkedNotebook(authenticationToken, guid)
  self.oprot:writeMessageBegin('expungeLinkedNotebook', TMessageType.CALL, self._seqid)
  local args = expungeLinkedNotebook_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_expungeLinkedNotebook(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = expungeLinkedNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:authenticateToSharedNotebook(shareKey, authenticationToken)
  self:send_authenticateToSharedNotebook(shareKey, authenticationToken)
  return self:recv_authenticateToSharedNotebook(shareKey, authenticationToken)
end

function NoteStoreClient:send_authenticateToSharedNotebook(shareKey, authenticationToken)
  self.oprot:writeMessageBegin('authenticateToSharedNotebook', TMessageType.CALL, self._seqid)
  local args = authenticateToSharedNotebook_args:new{}
  args.shareKey = shareKey
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_authenticateToSharedNotebook(shareKey, authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = authenticateToSharedNotebook_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:getSharedNotebookByAuth(authenticationToken)
  self:send_getSharedNotebookByAuth(authenticationToken)
  return self:recv_getSharedNotebookByAuth(authenticationToken)
end

function NoteStoreClient:send_getSharedNotebookByAuth(authenticationToken)
  self.oprot:writeMessageBegin('getSharedNotebookByAuth', TMessageType.CALL, self._seqid)
  local args = getSharedNotebookByAuth_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_getSharedNotebookByAuth(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getSharedNotebookByAuth_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:emailNote(authenticationToken, parameters)
  self:send_emailNote(authenticationToken, parameters)
  self:recv_emailNote(authenticationToken, parameters)
end

function NoteStoreClient:send_emailNote(authenticationToken, parameters)
  self.oprot:writeMessageBegin('emailNote', TMessageType.CALL, self._seqid)
  local args = emailNote_args:new{}
  args.authenticationToken = authenticationToken
  args.parameters = parameters
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_emailNote(authenticationToken, parameters)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = emailNote_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function NoteStoreClient:shareNote(authenticationToken, guid)
  self:send_shareNote(authenticationToken, guid)
  return self:recv_shareNote(authenticationToken, guid)
end

function NoteStoreClient:send_shareNote(authenticationToken, guid)
  self.oprot:writeMessageBegin('shareNote', TMessageType.CALL, self._seqid)
  local args = shareNote_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_shareNote(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = shareNote_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:stopSharingNote(authenticationToken, guid)
  self:send_stopSharingNote(authenticationToken, guid)
  self:recv_stopSharingNote(authenticationToken, guid)
end

function NoteStoreClient:send_stopSharingNote(authenticationToken, guid)
  self.oprot:writeMessageBegin('stopSharingNote', TMessageType.CALL, self._seqid)
  local args = stopSharingNote_args:new{}
  args.authenticationToken = authenticationToken
  args.guid = guid
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_stopSharingNote(authenticationToken, guid)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = stopSharingNote_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function NoteStoreClient:authenticateToSharedNote(guid, noteKey, authenticationToken)
  self:send_authenticateToSharedNote(guid, noteKey, authenticationToken)
  return self:recv_authenticateToSharedNote(guid, noteKey, authenticationToken)
end

function NoteStoreClient:send_authenticateToSharedNote(guid, noteKey, authenticationToken)
  self.oprot:writeMessageBegin('authenticateToSharedNote', TMessageType.CALL, self._seqid)
  local args = authenticateToSharedNote_args:new{}
  args.guid = guid
  args.noteKey = noteKey
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_authenticateToSharedNote(guid, noteKey, authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = authenticateToSharedNote_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function NoteStoreClient:findRelated(authenticationToken, query, resultSpec)
  self:send_findRelated(authenticationToken, query, resultSpec)
  return self:recv_findRelated(authenticationToken, query, resultSpec)
end

function NoteStoreClient:send_findRelated(authenticationToken, query, resultSpec)
  self.oprot:writeMessageBegin('findRelated', TMessageType.CALL, self._seqid)
  local args = findRelated_args:new{}
  args.authenticationToken = authenticationToken
  args.query = query
  args.resultSpec = resultSpec
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function NoteStoreClient:recv_findRelated(authenticationToken, query, resultSpec)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = findRelated_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.notFoundException then
    error(result.notFoundException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
NoteStoreIface = __TObject:new{
  __type = 'NoteStoreIface'
}


NoteStoreProcessor = __TObject.new(__TProcessor
, {
 __type = 'NoteStoreProcessor'
})

function NoteStoreProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function NoteStoreProcessor:process_getSyncState(seqid, iprot, oprot, server_ctx)
  local args = getSyncState_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSyncState_result:new{}
  local status, res = pcall(self.handler.getSyncState, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSyncState', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getSyncStateWithMetrics(seqid, iprot, oprot, server_ctx)
  local args = getSyncStateWithMetrics_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSyncStateWithMetrics_result:new{}
  local status, res = pcall(self.handler.getSyncStateWithMetrics, self.handler, args.authenticationToken, args.clientMetrics)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSyncStateWithMetrics', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getSyncChunk(seqid, iprot, oprot, server_ctx)
  local args = getSyncChunk_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSyncChunk_result:new{}
  local status, res = pcall(self.handler.getSyncChunk, self.handler, args.authenticationToken, args.afterUSN, args.maxEntries, args.fullSyncOnly)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSyncChunk', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getFilteredSyncChunk(seqid, iprot, oprot, server_ctx)
  local args = getFilteredSyncChunk_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getFilteredSyncChunk_result:new{}
  local status, res = pcall(self.handler.getFilteredSyncChunk, self.handler, args.authenticationToken, args.afterUSN, args.maxEntries, args.filter)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getFilteredSyncChunk', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getLinkedNotebookSyncState(seqid, iprot, oprot, server_ctx)
  local args = getLinkedNotebookSyncState_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getLinkedNotebookSyncState_result:new{}
  local status, res = pcall(self.handler.getLinkedNotebookSyncState, self.handler, args.authenticationToken, args.linkedNotebook)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getLinkedNotebookSyncState', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getLinkedNotebookSyncChunk(seqid, iprot, oprot, server_ctx)
  local args = getLinkedNotebookSyncChunk_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getLinkedNotebookSyncChunk_result:new{}
  local status, res = pcall(self.handler.getLinkedNotebookSyncChunk, self.handler, args.authenticationToken, args.linkedNotebook, args.afterUSN, args.maxEntries, args.fullSyncOnly)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getLinkedNotebookSyncChunk', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_listNotebooks(seqid, iprot, oprot, server_ctx)
  local args = listNotebooks_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = listNotebooks_result:new{}
  local status, res = pcall(self.handler.listNotebooks, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('listNotebooks', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getNotebook(seqid, iprot, oprot, server_ctx)
  local args = getNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNotebook_result:new{}
  local status, res = pcall(self.handler.getNotebook, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getDefaultNotebook(seqid, iprot, oprot, server_ctx)
  local args = getDefaultNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getDefaultNotebook_result:new{}
  local status, res = pcall(self.handler.getDefaultNotebook, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getDefaultNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_createNotebook(seqid, iprot, oprot, server_ctx)
  local args = createNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = createNotebook_result:new{}
  local status, res = pcall(self.handler.createNotebook, self.handler, args.authenticationToken, args.notebook)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('createNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_updateNotebook(seqid, iprot, oprot, server_ctx)
  local args = updateNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateNotebook_result:new{}
  local status, res = pcall(self.handler.updateNotebook, self.handler, args.authenticationToken, args.notebook)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_expungeNotebook(seqid, iprot, oprot, server_ctx)
  local args = expungeNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = expungeNotebook_result:new{}
  local status, res = pcall(self.handler.expungeNotebook, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('expungeNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_listTags(seqid, iprot, oprot, server_ctx)
  local args = listTags_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = listTags_result:new{}
  local status, res = pcall(self.handler.listTags, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('listTags', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_listTagsByNotebook(seqid, iprot, oprot, server_ctx)
  local args = listTagsByNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = listTagsByNotebook_result:new{}
  local status, res = pcall(self.handler.listTagsByNotebook, self.handler, args.authenticationToken, args.notebookGuid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('listTagsByNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getTag(seqid, iprot, oprot, server_ctx)
  local args = getTag_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getTag_result:new{}
  local status, res = pcall(self.handler.getTag, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getTag', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_createTag(seqid, iprot, oprot, server_ctx)
  local args = createTag_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = createTag_result:new{}
  local status, res = pcall(self.handler.createTag, self.handler, args.authenticationToken, args.tag)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('createTag', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_updateTag(seqid, iprot, oprot, server_ctx)
  local args = updateTag_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateTag_result:new{}
  local status, res = pcall(self.handler.updateTag, self.handler, args.authenticationToken, args.tag)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateTag', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_untagAll(seqid, iprot, oprot, server_ctx)
  local args = untagAll_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = untagAll_result:new{}
  local status, res = pcall(self.handler.untagAll, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('untagAll', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_expungeTag(seqid, iprot, oprot, server_ctx)
  local args = expungeTag_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = expungeTag_result:new{}
  local status, res = pcall(self.handler.expungeTag, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('expungeTag', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_listSearches(seqid, iprot, oprot, server_ctx)
  local args = listSearches_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = listSearches_result:new{}
  local status, res = pcall(self.handler.listSearches, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('listSearches', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getSearch(seqid, iprot, oprot, server_ctx)
  local args = getSearch_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSearch_result:new{}
  local status, res = pcall(self.handler.getSearch, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSearch', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_createSearch(seqid, iprot, oprot, server_ctx)
  local args = createSearch_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = createSearch_result:new{}
  local status, res = pcall(self.handler.createSearch, self.handler, args.authenticationToken, args.search)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('createSearch', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_updateSearch(seqid, iprot, oprot, server_ctx)
  local args = updateSearch_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateSearch_result:new{}
  local status, res = pcall(self.handler.updateSearch, self.handler, args.authenticationToken, args.search)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateSearch', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_expungeSearch(seqid, iprot, oprot, server_ctx)
  local args = expungeSearch_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = expungeSearch_result:new{}
  local status, res = pcall(self.handler.expungeSearch, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('expungeSearch', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_findNotes(seqid, iprot, oprot, server_ctx)
  local args = findNotes_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = findNotes_result:new{}
  local status, res = pcall(self.handler.findNotes, self.handler, args.authenticationToken, args.filter, args.offset, args.maxNotes)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('findNotes', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_findNoteOffset(seqid, iprot, oprot, server_ctx)
  local args = findNoteOffset_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = findNoteOffset_result:new{}
  local status, res = pcall(self.handler.findNoteOffset, self.handler, args.authenticationToken, args.filter, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('findNoteOffset', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_findNotesMetadata(seqid, iprot, oprot, server_ctx)
  local args = findNotesMetadata_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = findNotesMetadata_result:new{}
  local status, res = pcall(self.handler.findNotesMetadata, self.handler, args.authenticationToken, args.filter, args.offset, args.maxNotes, args.resultSpec)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('findNotesMetadata', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_findNoteCounts(seqid, iprot, oprot, server_ctx)
  local args = findNoteCounts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = findNoteCounts_result:new{}
  local status, res = pcall(self.handler.findNoteCounts, self.handler, args.authenticationToken, args.filter, args.withTrash)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('findNoteCounts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getNote(seqid, iprot, oprot, server_ctx)
  local args = getNote_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNote_result:new{}
  local status, res = pcall(self.handler.getNote, self.handler, args.authenticationToken, args.guid, args.withContent, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNote', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getNoteApplicationData(seqid, iprot, oprot, server_ctx)
  local args = getNoteApplicationData_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNoteApplicationData_result:new{}
  local status, res = pcall(self.handler.getNoteApplicationData, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNoteApplicationData', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getNoteApplicationDataEntry(seqid, iprot, oprot, server_ctx)
  local args = getNoteApplicationDataEntry_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNoteApplicationDataEntry_result:new{}
  local status, res = pcall(self.handler.getNoteApplicationDataEntry, self.handler, args.authenticationToken, args.guid, args.key)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNoteApplicationDataEntry', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_setNoteApplicationDataEntry(seqid, iprot, oprot, server_ctx)
  local args = setNoteApplicationDataEntry_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = setNoteApplicationDataEntry_result:new{}
  local status, res = pcall(self.handler.setNoteApplicationDataEntry, self.handler, args.authenticationToken, args.guid, args.key, args.value)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('setNoteApplicationDataEntry', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_unsetNoteApplicationDataEntry(seqid, iprot, oprot, server_ctx)
  local args = unsetNoteApplicationDataEntry_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = unsetNoteApplicationDataEntry_result:new{}
  local status, res = pcall(self.handler.unsetNoteApplicationDataEntry, self.handler, args.authenticationToken, args.guid, args.key)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('unsetNoteApplicationDataEntry', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getNoteContent(seqid, iprot, oprot, server_ctx)
  local args = getNoteContent_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNoteContent_result:new{}
  local status, res = pcall(self.handler.getNoteContent, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNoteContent', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getNoteSearchText(seqid, iprot, oprot, server_ctx)
  local args = getNoteSearchText_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNoteSearchText_result:new{}
  local status, res = pcall(self.handler.getNoteSearchText, self.handler, args.authenticationToken, args.guid, args.noteOnly, args.tokenizeForIndexing)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNoteSearchText', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getResourceSearchText(seqid, iprot, oprot, server_ctx)
  local args = getResourceSearchText_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getResourceSearchText_result:new{}
  local status, res = pcall(self.handler.getResourceSearchText, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getResourceSearchText', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getNoteTagNames(seqid, iprot, oprot, server_ctx)
  local args = getNoteTagNames_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNoteTagNames_result:new{}
  local status, res = pcall(self.handler.getNoteTagNames, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNoteTagNames', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_createNote(seqid, iprot, oprot, server_ctx)
  local args = createNote_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = createNote_result:new{}
  local status, res = pcall(self.handler.createNote, self.handler, args.authenticationToken, args.note)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('createNote', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_updateNote(seqid, iprot, oprot, server_ctx)
  local args = updateNote_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateNote_result:new{}
  local status, res = pcall(self.handler.updateNote, self.handler, args.authenticationToken, args.note)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateNote', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_deleteNote(seqid, iprot, oprot, server_ctx)
  local args = deleteNote_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = deleteNote_result:new{}
  local status, res = pcall(self.handler.deleteNote, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('deleteNote', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_expungeNote(seqid, iprot, oprot, server_ctx)
  local args = expungeNote_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = expungeNote_result:new{}
  local status, res = pcall(self.handler.expungeNote, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('expungeNote', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_expungeNotes(seqid, iprot, oprot, server_ctx)
  local args = expungeNotes_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = expungeNotes_result:new{}
  local status, res = pcall(self.handler.expungeNotes, self.handler, args.authenticationToken, args.noteGuids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('expungeNotes', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_expungeInactiveNotes(seqid, iprot, oprot, server_ctx)
  local args = expungeInactiveNotes_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = expungeInactiveNotes_result:new{}
  local status, res = pcall(self.handler.expungeInactiveNotes, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('expungeInactiveNotes', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_copyNote(seqid, iprot, oprot, server_ctx)
  local args = copyNote_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = copyNote_result:new{}
  local status, res = pcall(self.handler.copyNote, self.handler, args.authenticationToken, args.noteGuid, args.toNotebookGuid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('copyNote', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_listNoteVersions(seqid, iprot, oprot, server_ctx)
  local args = listNoteVersions_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = listNoteVersions_result:new{}
  local status, res = pcall(self.handler.listNoteVersions, self.handler, args.authenticationToken, args.noteGuid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('listNoteVersions', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getNoteVersion(seqid, iprot, oprot, server_ctx)
  local args = getNoteVersion_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNoteVersion_result:new{}
  local status, res = pcall(self.handler.getNoteVersion, self.handler, args.authenticationToken, args.noteGuid, args.updateSequenceNum, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNoteVersion', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getResource(seqid, iprot, oprot, server_ctx)
  local args = getResource_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getResource_result:new{}
  local status, res = pcall(self.handler.getResource, self.handler, args.authenticationToken, args.guid, args.withData, args.withRecognition, args.withAttributes, args.withAlternateData)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getResource', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getResourceApplicationData(seqid, iprot, oprot, server_ctx)
  local args = getResourceApplicationData_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getResourceApplicationData_result:new{}
  local status, res = pcall(self.handler.getResourceApplicationData, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getResourceApplicationData', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getResourceApplicationDataEntry(seqid, iprot, oprot, server_ctx)
  local args = getResourceApplicationDataEntry_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getResourceApplicationDataEntry_result:new{}
  local status, res = pcall(self.handler.getResourceApplicationDataEntry, self.handler, args.authenticationToken, args.guid, args.key)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getResourceApplicationDataEntry', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_setResourceApplicationDataEntry(seqid, iprot, oprot, server_ctx)
  local args = setResourceApplicationDataEntry_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = setResourceApplicationDataEntry_result:new{}
  local status, res = pcall(self.handler.setResourceApplicationDataEntry, self.handler, args.authenticationToken, args.guid, args.key, args.value)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('setResourceApplicationDataEntry', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_unsetResourceApplicationDataEntry(seqid, iprot, oprot, server_ctx)
  local args = unsetResourceApplicationDataEntry_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = unsetResourceApplicationDataEntry_result:new{}
  local status, res = pcall(self.handler.unsetResourceApplicationDataEntry, self.handler, args.authenticationToken, args.guid, args.key)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('unsetResourceApplicationDataEntry', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_updateResource(seqid, iprot, oprot, server_ctx)
  local args = updateResource_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateResource_result:new{}
  local status, res = pcall(self.handler.updateResource, self.handler, args.authenticationToken, args.resource)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateResource', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getResourceData(seqid, iprot, oprot, server_ctx)
  local args = getResourceData_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getResourceData_result:new{}
  local status, res = pcall(self.handler.getResourceData, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getResourceData', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getResourceByHash(seqid, iprot, oprot, server_ctx)
  local args = getResourceByHash_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getResourceByHash_result:new{}
  local status, res = pcall(self.handler.getResourceByHash, self.handler, args.authenticationToken, args.noteGuid, args.contentHash, args.withData, args.withRecognition, args.withAlternateData)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getResourceByHash', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getResourceRecognition(seqid, iprot, oprot, server_ctx)
  local args = getResourceRecognition_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getResourceRecognition_result:new{}
  local status, res = pcall(self.handler.getResourceRecognition, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getResourceRecognition', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getResourceAlternateData(seqid, iprot, oprot, server_ctx)
  local args = getResourceAlternateData_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getResourceAlternateData_result:new{}
  local status, res = pcall(self.handler.getResourceAlternateData, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getResourceAlternateData', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getResourceAttributes(seqid, iprot, oprot, server_ctx)
  local args = getResourceAttributes_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getResourceAttributes_result:new{}
  local status, res = pcall(self.handler.getResourceAttributes, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getResourceAttributes', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getPublicNotebook(seqid, iprot, oprot, server_ctx)
  local args = getPublicNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPublicNotebook_result:new{}
  local status, res = pcall(self.handler.getPublicNotebook, self.handler, args.userId, args.publicUri)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPublicNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_createSharedNotebook(seqid, iprot, oprot, server_ctx)
  local args = createSharedNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = createSharedNotebook_result:new{}
  local status, res = pcall(self.handler.createSharedNotebook, self.handler, args.authenticationToken, args.sharedNotebook)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('createSharedNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_updateSharedNotebook(seqid, iprot, oprot, server_ctx)
  local args = updateSharedNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateSharedNotebook_result:new{}
  local status, res = pcall(self.handler.updateSharedNotebook, self.handler, args.authenticationToken, args.sharedNotebook)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateSharedNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_setSharedNotebookRecipientSettings(seqid, iprot, oprot, server_ctx)
  local args = setSharedNotebookRecipientSettings_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = setSharedNotebookRecipientSettings_result:new{}
  local status, res = pcall(self.handler.setSharedNotebookRecipientSettings, self.handler, args.authenticationToken, args.sharedNotebookId, args.recipientSettings)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('setSharedNotebookRecipientSettings', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_sendMessageToSharedNotebookMembers(seqid, iprot, oprot, server_ctx)
  local args = sendMessageToSharedNotebookMembers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = sendMessageToSharedNotebookMembers_result:new{}
  local status, res = pcall(self.handler.sendMessageToSharedNotebookMembers, self.handler, args.authenticationToken, args.notebookGuid, args.messageText, args.recipients)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('sendMessageToSharedNotebookMembers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_listSharedNotebooks(seqid, iprot, oprot, server_ctx)
  local args = listSharedNotebooks_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = listSharedNotebooks_result:new{}
  local status, res = pcall(self.handler.listSharedNotebooks, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('listSharedNotebooks', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_expungeSharedNotebooks(seqid, iprot, oprot, server_ctx)
  local args = expungeSharedNotebooks_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = expungeSharedNotebooks_result:new{}
  local status, res = pcall(self.handler.expungeSharedNotebooks, self.handler, args.authenticationToken, args.sharedNotebookIds)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('expungeSharedNotebooks', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_createLinkedNotebook(seqid, iprot, oprot, server_ctx)
  local args = createLinkedNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = createLinkedNotebook_result:new{}
  local status, res = pcall(self.handler.createLinkedNotebook, self.handler, args.authenticationToken, args.linkedNotebook)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('createLinkedNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_updateLinkedNotebook(seqid, iprot, oprot, server_ctx)
  local args = updateLinkedNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateLinkedNotebook_result:new{}
  local status, res = pcall(self.handler.updateLinkedNotebook, self.handler, args.authenticationToken, args.linkedNotebook)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateLinkedNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_listLinkedNotebooks(seqid, iprot, oprot, server_ctx)
  local args = listLinkedNotebooks_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = listLinkedNotebooks_result:new{}
  local status, res = pcall(self.handler.listLinkedNotebooks, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('listLinkedNotebooks', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_expungeLinkedNotebook(seqid, iprot, oprot, server_ctx)
  local args = expungeLinkedNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = expungeLinkedNotebook_result:new{}
  local status, res = pcall(self.handler.expungeLinkedNotebook, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('expungeLinkedNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_authenticateToSharedNotebook(seqid, iprot, oprot, server_ctx)
  local args = authenticateToSharedNotebook_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = authenticateToSharedNotebook_result:new{}
  local status, res = pcall(self.handler.authenticateToSharedNotebook, self.handler, args.shareKey, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('authenticateToSharedNotebook', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_getSharedNotebookByAuth(seqid, iprot, oprot, server_ctx)
  local args = getSharedNotebookByAuth_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getSharedNotebookByAuth_result:new{}
  local status, res = pcall(self.handler.getSharedNotebookByAuth, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getSharedNotebookByAuth', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_emailNote(seqid, iprot, oprot, server_ctx)
  local args = emailNote_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = emailNote_result:new{}
  local status, res = pcall(self.handler.emailNote, self.handler, args.authenticationToken, args.parameters)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('emailNote', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_shareNote(seqid, iprot, oprot, server_ctx)
  local args = shareNote_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = shareNote_result:new{}
  local status, res = pcall(self.handler.shareNote, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('shareNote', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_stopSharingNote(seqid, iprot, oprot, server_ctx)
  local args = stopSharingNote_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = stopSharingNote_result:new{}
  local status, res = pcall(self.handler.stopSharingNote, self.handler, args.authenticationToken, args.guid)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('stopSharingNote', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_authenticateToSharedNote(seqid, iprot, oprot, server_ctx)
  local args = authenticateToSharedNote_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = authenticateToSharedNote_result:new{}
  local status, res = pcall(self.handler.authenticateToSharedNote, self.handler, args.guid, args.noteKey, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('authenticateToSharedNote', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function NoteStoreProcessor:process_findRelated(seqid, iprot, oprot, server_ctx)
  local args = findRelated_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = findRelated_result:new{}
  local status, res = pcall(self.handler.findRelated, self.handler, args.authenticationToken, args.query, args.resultSpec)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('findRelated', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

getSyncState_args = __TObject:new{
  authenticationToken
}

function getSyncState_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSyncState_args:write(oprot)
  oprot:writeStructBegin('getSyncState_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSyncState_result = __TObject:new{
  success,
  userException,
  systemException
}

function getSyncState_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SyncState:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSyncState_result:write(oprot)
  oprot:writeStructBegin('getSyncState_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSyncStateWithMetrics_args = __TObject:new{
  authenticationToken,
  clientMetrics
}

function getSyncStateWithMetrics_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.clientMetrics = ClientUsageMetrics:new{}
        self.clientMetrics:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSyncStateWithMetrics_args:write(oprot)
  oprot:writeStructBegin('getSyncStateWithMetrics_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.clientMetrics then
    oprot:writeFieldBegin('clientMetrics', TType.STRUCT, 2)
    self.clientMetrics:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSyncStateWithMetrics_result = __TObject:new{
  success,
  userException,
  systemException
}

function getSyncStateWithMetrics_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SyncState:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSyncStateWithMetrics_result:write(oprot)
  oprot:writeStructBegin('getSyncStateWithMetrics_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSyncChunk_args = __TObject:new{
  authenticationToken,
  afterUSN,
  maxEntries,
  fullSyncOnly
}

function getSyncChunk_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.afterUSN = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.maxEntries = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.fullSyncOnly = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSyncChunk_args:write(oprot)
  oprot:writeStructBegin('getSyncChunk_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.afterUSN then
    oprot:writeFieldBegin('afterUSN', TType.I32, 2)
    oprot:writeI32(self.afterUSN)
    oprot:writeFieldEnd()
  end
  if self.maxEntries then
    oprot:writeFieldBegin('maxEntries', TType.I32, 3)
    oprot:writeI32(self.maxEntries)
    oprot:writeFieldEnd()
  end
  if self.fullSyncOnly then
    oprot:writeFieldBegin('fullSyncOnly', TType.BOOL, 4)
    oprot:writeBool(self.fullSyncOnly)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSyncChunk_result = __TObject:new{
  success,
  userException,
  systemException
}

function getSyncChunk_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SyncChunk:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSyncChunk_result:write(oprot)
  oprot:writeStructBegin('getSyncChunk_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFilteredSyncChunk_args = __TObject:new{
  authenticationToken,
  afterUSN,
  maxEntries,
  filter
}

function getFilteredSyncChunk_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.afterUSN = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.maxEntries = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.filter = SyncChunkFilter:new{}
        self.filter:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFilteredSyncChunk_args:write(oprot)
  oprot:writeStructBegin('getFilteredSyncChunk_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.afterUSN then
    oprot:writeFieldBegin('afterUSN', TType.I32, 2)
    oprot:writeI32(self.afterUSN)
    oprot:writeFieldEnd()
  end
  if self.maxEntries then
    oprot:writeFieldBegin('maxEntries', TType.I32, 3)
    oprot:writeI32(self.maxEntries)
    oprot:writeFieldEnd()
  end
  if self.filter then
    oprot:writeFieldBegin('filter', TType.STRUCT, 4)
    self.filter:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getFilteredSyncChunk_result = __TObject:new{
  success,
  userException,
  systemException
}

function getFilteredSyncChunk_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SyncChunk:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getFilteredSyncChunk_result:write(oprot)
  oprot:writeStructBegin('getFilteredSyncChunk_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getLinkedNotebookSyncState_args = __TObject:new{
  authenticationToken,
  linkedNotebook
}

function getLinkedNotebookSyncState_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.linkedNotebook = LinkedNotebook:new{}
        self.linkedNotebook:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getLinkedNotebookSyncState_args:write(oprot)
  oprot:writeStructBegin('getLinkedNotebookSyncState_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.linkedNotebook then
    oprot:writeFieldBegin('linkedNotebook', TType.STRUCT, 2)
    self.linkedNotebook:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getLinkedNotebookSyncState_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getLinkedNotebookSyncState_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SyncState:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getLinkedNotebookSyncState_result:write(oprot)
  oprot:writeStructBegin('getLinkedNotebookSyncState_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getLinkedNotebookSyncChunk_args = __TObject:new{
  authenticationToken,
  linkedNotebook,
  afterUSN,
  maxEntries,
  fullSyncOnly
}

function getLinkedNotebookSyncChunk_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.linkedNotebook = LinkedNotebook:new{}
        self.linkedNotebook:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.afterUSN = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.maxEntries = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.fullSyncOnly = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getLinkedNotebookSyncChunk_args:write(oprot)
  oprot:writeStructBegin('getLinkedNotebookSyncChunk_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.linkedNotebook then
    oprot:writeFieldBegin('linkedNotebook', TType.STRUCT, 2)
    self.linkedNotebook:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.afterUSN then
    oprot:writeFieldBegin('afterUSN', TType.I32, 3)
    oprot:writeI32(self.afterUSN)
    oprot:writeFieldEnd()
  end
  if self.maxEntries then
    oprot:writeFieldBegin('maxEntries', TType.I32, 4)
    oprot:writeI32(self.maxEntries)
    oprot:writeFieldEnd()
  end
  if self.fullSyncOnly then
    oprot:writeFieldBegin('fullSyncOnly', TType.BOOL, 5)
    oprot:writeBool(self.fullSyncOnly)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getLinkedNotebookSyncChunk_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getLinkedNotebookSyncChunk_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SyncChunk:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getLinkedNotebookSyncChunk_result:write(oprot)
  oprot:writeStructBegin('getLinkedNotebookSyncChunk_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listNotebooks_args = __TObject:new{
  authenticationToken
}

function listNotebooks_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listNotebooks_args:write(oprot)
  oprot:writeStructBegin('listNotebooks_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listNotebooks_result = __TObject:new{
  success,
  userException,
  systemException
}

function listNotebooks_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype169, _size166 = iprot:readListBegin()
        for _i=1,_size166 do
          _elem170 = Notebook:new{}
          _elem170:read(iprot)
          table.insert(self.success, _elem170)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listNotebooks_result:write(oprot)
  oprot:writeStructBegin('listNotebooks_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter171 in ipairs(self.success) do
      iter171:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNotebook_args = __TObject:new{
  authenticationToken,
  guid
}

function getNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNotebook_args:write(oprot)
  oprot:writeStructBegin('getNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNotebook_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Notebook:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNotebook_result:write(oprot)
  oprot:writeStructBegin('getNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getDefaultNotebook_args = __TObject:new{
  authenticationToken
}

function getDefaultNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getDefaultNotebook_args:write(oprot)
  oprot:writeStructBegin('getDefaultNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getDefaultNotebook_result = __TObject:new{
  success,
  userException,
  systemException
}

function getDefaultNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Notebook:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getDefaultNotebook_result:write(oprot)
  oprot:writeStructBegin('getDefaultNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createNotebook_args = __TObject:new{
  authenticationToken,
  notebook
}

function createNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notebook = Notebook:new{}
        self.notebook:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createNotebook_args:write(oprot)
  oprot:writeStructBegin('createNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.notebook then
    oprot:writeFieldBegin('notebook', TType.STRUCT, 2)
    self.notebook:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createNotebook_result = __TObject:new{
  success,
  userException,
  systemException
}

function createNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Notebook:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createNotebook_result:write(oprot)
  oprot:writeStructBegin('createNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateNotebook_args = __TObject:new{
  authenticationToken,
  notebook
}

function updateNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notebook = Notebook:new{}
        self.notebook:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateNotebook_args:write(oprot)
  oprot:writeStructBegin('updateNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.notebook then
    oprot:writeFieldBegin('notebook', TType.STRUCT, 2)
    self.notebook:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateNotebook_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function updateNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateNotebook_result:write(oprot)
  oprot:writeStructBegin('updateNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeNotebook_args = __TObject:new{
  authenticationToken,
  guid
}

function expungeNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeNotebook_args:write(oprot)
  oprot:writeStructBegin('expungeNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeNotebook_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function expungeNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeNotebook_result:write(oprot)
  oprot:writeStructBegin('expungeNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listTags_args = __TObject:new{
  authenticationToken
}

function listTags_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listTags_args:write(oprot)
  oprot:writeStructBegin('listTags_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listTags_result = __TObject:new{
  success,
  userException,
  systemException
}

function listTags_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype175, _size172 = iprot:readListBegin()
        for _i=1,_size172 do
          _elem176 = Tag:new{}
          _elem176:read(iprot)
          table.insert(self.success, _elem176)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listTags_result:write(oprot)
  oprot:writeStructBegin('listTags_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter177 in ipairs(self.success) do
      iter177:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listTagsByNotebook_args = __TObject:new{
  authenticationToken,
  notebookGuid
}

function listTagsByNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.notebookGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listTagsByNotebook_args:write(oprot)
  oprot:writeStructBegin('listTagsByNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.notebookGuid then
    oprot:writeFieldBegin('notebookGuid', TType.STRING, 2)
    oprot:writeString(self.notebookGuid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listTagsByNotebook_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function listTagsByNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype181, _size178 = iprot:readListBegin()
        for _i=1,_size178 do
          _elem182 = Tag:new{}
          _elem182:read(iprot)
          table.insert(self.success, _elem182)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listTagsByNotebook_result:write(oprot)
  oprot:writeStructBegin('listTagsByNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter183 in ipairs(self.success) do
      iter183:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getTag_args = __TObject:new{
  authenticationToken,
  guid
}

function getTag_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getTag_args:write(oprot)
  oprot:writeStructBegin('getTag_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getTag_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getTag_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Tag:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getTag_result:write(oprot)
  oprot:writeStructBegin('getTag_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createTag_args = __TObject:new{
  authenticationToken,
  tag
}

function createTag_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tag = Tag:new{}
        self.tag:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createTag_args:write(oprot)
  oprot:writeStructBegin('createTag_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.tag then
    oprot:writeFieldBegin('tag', TType.STRUCT, 2)
    self.tag:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createTag_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function createTag_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Tag:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createTag_result:write(oprot)
  oprot:writeStructBegin('createTag_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateTag_args = __TObject:new{
  authenticationToken,
  tag
}

function updateTag_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tag = Tag:new{}
        self.tag:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateTag_args:write(oprot)
  oprot:writeStructBegin('updateTag_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.tag then
    oprot:writeFieldBegin('tag', TType.STRUCT, 2)
    self.tag:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateTag_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function updateTag_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateTag_result:write(oprot)
  oprot:writeStructBegin('updateTag_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

untagAll_args = __TObject:new{
  authenticationToken,
  guid
}

function untagAll_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function untagAll_args:write(oprot)
  oprot:writeStructBegin('untagAll_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

untagAll_result = __TObject:new{
  userException,
  systemException,
  notFoundException
}

function untagAll_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function untagAll_result:write(oprot)
  oprot:writeStructBegin('untagAll_result')
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeTag_args = __TObject:new{
  authenticationToken,
  guid
}

function expungeTag_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeTag_args:write(oprot)
  oprot:writeStructBegin('expungeTag_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeTag_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function expungeTag_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeTag_result:write(oprot)
  oprot:writeStructBegin('expungeTag_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listSearches_args = __TObject:new{
  authenticationToken
}

function listSearches_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listSearches_args:write(oprot)
  oprot:writeStructBegin('listSearches_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listSearches_result = __TObject:new{
  success,
  userException,
  systemException
}

function listSearches_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype187, _size184 = iprot:readListBegin()
        for _i=1,_size184 do
          _elem188 = SavedSearch:new{}
          _elem188:read(iprot)
          table.insert(self.success, _elem188)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listSearches_result:write(oprot)
  oprot:writeStructBegin('listSearches_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter189 in ipairs(self.success) do
      iter189:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSearch_args = __TObject:new{
  authenticationToken,
  guid
}

function getSearch_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSearch_args:write(oprot)
  oprot:writeStructBegin('getSearch_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSearch_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getSearch_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SavedSearch:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSearch_result:write(oprot)
  oprot:writeStructBegin('getSearch_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createSearch_args = __TObject:new{
  authenticationToken,
  search
}

function createSearch_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.search = SavedSearch:new{}
        self.search:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createSearch_args:write(oprot)
  oprot:writeStructBegin('createSearch_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.search then
    oprot:writeFieldBegin('search', TType.STRUCT, 2)
    self.search:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createSearch_result = __TObject:new{
  success,
  userException,
  systemException
}

function createSearch_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SavedSearch:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createSearch_result:write(oprot)
  oprot:writeStructBegin('createSearch_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSearch_args = __TObject:new{
  authenticationToken,
  search
}

function updateSearch_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.search = SavedSearch:new{}
        self.search:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSearch_args:write(oprot)
  oprot:writeStructBegin('updateSearch_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.search then
    oprot:writeFieldBegin('search', TType.STRUCT, 2)
    self.search:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSearch_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function updateSearch_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSearch_result:write(oprot)
  oprot:writeStructBegin('updateSearch_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeSearch_args = __TObject:new{
  authenticationToken,
  guid
}

function expungeSearch_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeSearch_args:write(oprot)
  oprot:writeStructBegin('expungeSearch_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeSearch_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function expungeSearch_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeSearch_result:write(oprot)
  oprot:writeStructBegin('expungeSearch_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findNotes_args = __TObject:new{
  authenticationToken,
  filter,
  offset,
  maxNotes
}

function findNotes_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.filter = NoteFilter:new{}
        self.filter:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.offset = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.maxNotes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findNotes_args:write(oprot)
  oprot:writeStructBegin('findNotes_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.filter then
    oprot:writeFieldBegin('filter', TType.STRUCT, 2)
    self.filter:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.offset then
    oprot:writeFieldBegin('offset', TType.I32, 3)
    oprot:writeI32(self.offset)
    oprot:writeFieldEnd()
  end
  if self.maxNotes then
    oprot:writeFieldBegin('maxNotes', TType.I32, 4)
    oprot:writeI32(self.maxNotes)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findNotes_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function findNotes_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = NoteList:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findNotes_result:write(oprot)
  oprot:writeStructBegin('findNotes_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findNoteOffset_args = __TObject:new{
  authenticationToken,
  filter,
  guid
}

function findNoteOffset_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.filter = NoteFilter:new{}
        self.filter:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findNoteOffset_args:write(oprot)
  oprot:writeStructBegin('findNoteOffset_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.filter then
    oprot:writeFieldBegin('filter', TType.STRUCT, 2)
    self.filter:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 3)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findNoteOffset_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function findNoteOffset_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findNoteOffset_result:write(oprot)
  oprot:writeStructBegin('findNoteOffset_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findNotesMetadata_args = __TObject:new{
  authenticationToken,
  filter,
  offset,
  maxNotes,
  resultSpec
}

function findNotesMetadata_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.filter = NoteFilter:new{}
        self.filter:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.offset = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.maxNotes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.resultSpec = NotesMetadataResultSpec:new{}
        self.resultSpec:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findNotesMetadata_args:write(oprot)
  oprot:writeStructBegin('findNotesMetadata_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.filter then
    oprot:writeFieldBegin('filter', TType.STRUCT, 2)
    self.filter:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.offset then
    oprot:writeFieldBegin('offset', TType.I32, 3)
    oprot:writeI32(self.offset)
    oprot:writeFieldEnd()
  end
  if self.maxNotes then
    oprot:writeFieldBegin('maxNotes', TType.I32, 4)
    oprot:writeI32(self.maxNotes)
    oprot:writeFieldEnd()
  end
  if self.resultSpec then
    oprot:writeFieldBegin('resultSpec', TType.STRUCT, 5)
    self.resultSpec:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findNotesMetadata_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function findNotesMetadata_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = NotesMetadataList:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findNotesMetadata_result:write(oprot)
  oprot:writeStructBegin('findNotesMetadata_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findNoteCounts_args = __TObject:new{
  authenticationToken,
  filter,
  withTrash
}

function findNoteCounts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.filter = NoteFilter:new{}
        self.filter:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.withTrash = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findNoteCounts_args:write(oprot)
  oprot:writeStructBegin('findNoteCounts_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.filter then
    oprot:writeFieldBegin('filter', TType.STRUCT, 2)
    self.filter:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.withTrash then
    oprot:writeFieldBegin('withTrash', TType.BOOL, 3)
    oprot:writeBool(self.withTrash)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findNoteCounts_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function findNoteCounts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = NoteCollectionCounts:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findNoteCounts_result:write(oprot)
  oprot:writeStructBegin('findNoteCounts_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNote_args = __TObject:new{
  authenticationToken,
  guid,
  withContent,
  withResourcesData,
  withResourcesRecognition,
  withResourcesAlternateData
}

function getNote_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.withContent = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.withResourcesData = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.withResourcesRecognition = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.withResourcesAlternateData = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNote_args:write(oprot)
  oprot:writeStructBegin('getNote_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.withContent then
    oprot:writeFieldBegin('withContent', TType.BOOL, 3)
    oprot:writeBool(self.withContent)
    oprot:writeFieldEnd()
  end
  if self.withResourcesData then
    oprot:writeFieldBegin('withResourcesData', TType.BOOL, 4)
    oprot:writeBool(self.withResourcesData)
    oprot:writeFieldEnd()
  end
  if self.withResourcesRecognition then
    oprot:writeFieldBegin('withResourcesRecognition', TType.BOOL, 5)
    oprot:writeBool(self.withResourcesRecognition)
    oprot:writeFieldEnd()
  end
  if self.withResourcesAlternateData then
    oprot:writeFieldBegin('withResourcesAlternateData', TType.BOOL, 6)
    oprot:writeBool(self.withResourcesAlternateData)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNote_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getNote_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Note:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNote_result:write(oprot)
  oprot:writeStructBegin('getNote_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteApplicationData_args = __TObject:new{
  authenticationToken,
  guid
}

function getNoteApplicationData_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteApplicationData_args:write(oprot)
  oprot:writeStructBegin('getNoteApplicationData_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteApplicationData_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getNoteApplicationData_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = LazyMap:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteApplicationData_result:write(oprot)
  oprot:writeStructBegin('getNoteApplicationData_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteApplicationDataEntry_args = __TObject:new{
  authenticationToken,
  guid,
  key
}

function getNoteApplicationDataEntry_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteApplicationDataEntry_args:write(oprot)
  oprot:writeStructBegin('getNoteApplicationDataEntry_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.key then
    oprot:writeFieldBegin('key', TType.STRING, 3)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteApplicationDataEntry_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getNoteApplicationDataEntry_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteApplicationDataEntry_result:write(oprot)
  oprot:writeStructBegin('getNoteApplicationDataEntry_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

setNoteApplicationDataEntry_args = __TObject:new{
  authenticationToken,
  guid,
  key,
  value
}

function setNoteApplicationDataEntry_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function setNoteApplicationDataEntry_args:write(oprot)
  oprot:writeStructBegin('setNoteApplicationDataEntry_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.key then
    oprot:writeFieldBegin('key', TType.STRING, 3)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  if self.value then
    oprot:writeFieldBegin('value', TType.STRING, 4)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

setNoteApplicationDataEntry_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function setNoteApplicationDataEntry_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function setNoteApplicationDataEntry_result:write(oprot)
  oprot:writeStructBegin('setNoteApplicationDataEntry_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unsetNoteApplicationDataEntry_args = __TObject:new{
  authenticationToken,
  guid,
  key
}

function unsetNoteApplicationDataEntry_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unsetNoteApplicationDataEntry_args:write(oprot)
  oprot:writeStructBegin('unsetNoteApplicationDataEntry_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.key then
    oprot:writeFieldBegin('key', TType.STRING, 3)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unsetNoteApplicationDataEntry_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function unsetNoteApplicationDataEntry_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unsetNoteApplicationDataEntry_result:write(oprot)
  oprot:writeStructBegin('unsetNoteApplicationDataEntry_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteContent_args = __TObject:new{
  authenticationToken,
  guid
}

function getNoteContent_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteContent_args:write(oprot)
  oprot:writeStructBegin('getNoteContent_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteContent_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getNoteContent_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteContent_result:write(oprot)
  oprot:writeStructBegin('getNoteContent_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteSearchText_args = __TObject:new{
  authenticationToken,
  guid,
  noteOnly,
  tokenizeForIndexing
}

function getNoteSearchText_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.noteOnly = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.tokenizeForIndexing = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteSearchText_args:write(oprot)
  oprot:writeStructBegin('getNoteSearchText_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.noteOnly then
    oprot:writeFieldBegin('noteOnly', TType.BOOL, 3)
    oprot:writeBool(self.noteOnly)
    oprot:writeFieldEnd()
  end
  if self.tokenizeForIndexing then
    oprot:writeFieldBegin('tokenizeForIndexing', TType.BOOL, 4)
    oprot:writeBool(self.tokenizeForIndexing)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteSearchText_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getNoteSearchText_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteSearchText_result:write(oprot)
  oprot:writeStructBegin('getNoteSearchText_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceSearchText_args = __TObject:new{
  authenticationToken,
  guid
}

function getResourceSearchText_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceSearchText_args:write(oprot)
  oprot:writeStructBegin('getResourceSearchText_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceSearchText_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getResourceSearchText_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceSearchText_result:write(oprot)
  oprot:writeStructBegin('getResourceSearchText_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteTagNames_args = __TObject:new{
  authenticationToken,
  guid
}

function getNoteTagNames_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteTagNames_args:write(oprot)
  oprot:writeStructBegin('getNoteTagNames_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteTagNames_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getNoteTagNames_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype193, _size190 = iprot:readListBegin()
        for _i=1,_size190 do
          _elem194 = iprot:readString()
          table.insert(self.success, _elem194)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteTagNames_result:write(oprot)
  oprot:writeStructBegin('getNoteTagNames_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter195 in ipairs(self.success) do
      oprot:writeString(iter195)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createNote_args = __TObject:new{
  authenticationToken,
  note
}

function createNote_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.note = Note:new{}
        self.note:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createNote_args:write(oprot)
  oprot:writeStructBegin('createNote_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.note then
    oprot:writeFieldBegin('note', TType.STRUCT, 2)
    self.note:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createNote_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function createNote_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Note:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createNote_result:write(oprot)
  oprot:writeStructBegin('createNote_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateNote_args = __TObject:new{
  authenticationToken,
  note
}

function updateNote_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.note = Note:new{}
        self.note:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateNote_args:write(oprot)
  oprot:writeStructBegin('updateNote_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.note then
    oprot:writeFieldBegin('note', TType.STRUCT, 2)
    self.note:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateNote_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function updateNote_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Note:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateNote_result:write(oprot)
  oprot:writeStructBegin('updateNote_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteNote_args = __TObject:new{
  authenticationToken,
  guid
}

function deleteNote_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteNote_args:write(oprot)
  oprot:writeStructBegin('deleteNote_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteNote_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function deleteNote_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteNote_result:write(oprot)
  oprot:writeStructBegin('deleteNote_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeNote_args = __TObject:new{
  authenticationToken,
  guid
}

function expungeNote_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeNote_args:write(oprot)
  oprot:writeStructBegin('expungeNote_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeNote_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function expungeNote_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeNote_result:write(oprot)
  oprot:writeStructBegin('expungeNote_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeNotes_args = __TObject:new{
  authenticationToken,
  noteGuids
}

function expungeNotes_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.noteGuids = {}
        local _etype199, _size196 = iprot:readListBegin()
        for _i=1,_size196 do
          _elem200 = iprot:readString()
          table.insert(self.noteGuids, _elem200)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeNotes_args:write(oprot)
  oprot:writeStructBegin('expungeNotes_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.noteGuids then
    oprot:writeFieldBegin('noteGuids', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.noteGuids)
    for _,iter201 in ipairs(self.noteGuids) do
      oprot:writeString(iter201)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeNotes_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function expungeNotes_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeNotes_result:write(oprot)
  oprot:writeStructBegin('expungeNotes_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeInactiveNotes_args = __TObject:new{
  authenticationToken
}

function expungeInactiveNotes_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeInactiveNotes_args:write(oprot)
  oprot:writeStructBegin('expungeInactiveNotes_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeInactiveNotes_result = __TObject:new{
  success,
  userException,
  systemException
}

function expungeInactiveNotes_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeInactiveNotes_result:write(oprot)
  oprot:writeStructBegin('expungeInactiveNotes_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

copyNote_args = __TObject:new{
  authenticationToken,
  noteGuid,
  toNotebookGuid
}

function copyNote_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.noteGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.toNotebookGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function copyNote_args:write(oprot)
  oprot:writeStructBegin('copyNote_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.noteGuid then
    oprot:writeFieldBegin('noteGuid', TType.STRING, 2)
    oprot:writeString(self.noteGuid)
    oprot:writeFieldEnd()
  end
  if self.toNotebookGuid then
    oprot:writeFieldBegin('toNotebookGuid', TType.STRING, 3)
    oprot:writeString(self.toNotebookGuid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

copyNote_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function copyNote_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Note:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function copyNote_result:write(oprot)
  oprot:writeStructBegin('copyNote_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listNoteVersions_args = __TObject:new{
  authenticationToken,
  noteGuid
}

function listNoteVersions_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.noteGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listNoteVersions_args:write(oprot)
  oprot:writeStructBegin('listNoteVersions_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.noteGuid then
    oprot:writeFieldBegin('noteGuid', TType.STRING, 2)
    oprot:writeString(self.noteGuid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listNoteVersions_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function listNoteVersions_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype205, _size202 = iprot:readListBegin()
        for _i=1,_size202 do
          _elem206 = NoteVersionId:new{}
          _elem206:read(iprot)
          table.insert(self.success, _elem206)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listNoteVersions_result:write(oprot)
  oprot:writeStructBegin('listNoteVersions_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter207 in ipairs(self.success) do
      iter207:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteVersion_args = __TObject:new{
  authenticationToken,
  noteGuid,
  updateSequenceNum,
  withResourcesData,
  withResourcesRecognition,
  withResourcesAlternateData
}

function getNoteVersion_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.noteGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.updateSequenceNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.withResourcesData = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.withResourcesRecognition = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.withResourcesAlternateData = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteVersion_args:write(oprot)
  oprot:writeStructBegin('getNoteVersion_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.noteGuid then
    oprot:writeFieldBegin('noteGuid', TType.STRING, 2)
    oprot:writeString(self.noteGuid)
    oprot:writeFieldEnd()
  end
  if self.updateSequenceNum then
    oprot:writeFieldBegin('updateSequenceNum', TType.I32, 3)
    oprot:writeI32(self.updateSequenceNum)
    oprot:writeFieldEnd()
  end
  if self.withResourcesData then
    oprot:writeFieldBegin('withResourcesData', TType.BOOL, 4)
    oprot:writeBool(self.withResourcesData)
    oprot:writeFieldEnd()
  end
  if self.withResourcesRecognition then
    oprot:writeFieldBegin('withResourcesRecognition', TType.BOOL, 5)
    oprot:writeBool(self.withResourcesRecognition)
    oprot:writeFieldEnd()
  end
  if self.withResourcesAlternateData then
    oprot:writeFieldBegin('withResourcesAlternateData', TType.BOOL, 6)
    oprot:writeBool(self.withResourcesAlternateData)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteVersion_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getNoteVersion_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Note:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteVersion_result:write(oprot)
  oprot:writeStructBegin('getNoteVersion_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResource_args = __TObject:new{
  authenticationToken,
  guid,
  withData,
  withRecognition,
  withAttributes,
  withAlternateData
}

function getResource_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.withData = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.withRecognition = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.withAttributes = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.withAlternateData = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResource_args:write(oprot)
  oprot:writeStructBegin('getResource_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.withData then
    oprot:writeFieldBegin('withData', TType.BOOL, 3)
    oprot:writeBool(self.withData)
    oprot:writeFieldEnd()
  end
  if self.withRecognition then
    oprot:writeFieldBegin('withRecognition', TType.BOOL, 4)
    oprot:writeBool(self.withRecognition)
    oprot:writeFieldEnd()
  end
  if self.withAttributes then
    oprot:writeFieldBegin('withAttributes', TType.BOOL, 5)
    oprot:writeBool(self.withAttributes)
    oprot:writeFieldEnd()
  end
  if self.withAlternateData then
    oprot:writeFieldBegin('withAlternateData', TType.BOOL, 6)
    oprot:writeBool(self.withAlternateData)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResource_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getResource_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Resource:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResource_result:write(oprot)
  oprot:writeStructBegin('getResource_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceApplicationData_args = __TObject:new{
  authenticationToken,
  guid
}

function getResourceApplicationData_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceApplicationData_args:write(oprot)
  oprot:writeStructBegin('getResourceApplicationData_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceApplicationData_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getResourceApplicationData_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = LazyMap:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceApplicationData_result:write(oprot)
  oprot:writeStructBegin('getResourceApplicationData_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceApplicationDataEntry_args = __TObject:new{
  authenticationToken,
  guid,
  key
}

function getResourceApplicationDataEntry_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceApplicationDataEntry_args:write(oprot)
  oprot:writeStructBegin('getResourceApplicationDataEntry_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.key then
    oprot:writeFieldBegin('key', TType.STRING, 3)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceApplicationDataEntry_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getResourceApplicationDataEntry_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceApplicationDataEntry_result:write(oprot)
  oprot:writeStructBegin('getResourceApplicationDataEntry_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

setResourceApplicationDataEntry_args = __TObject:new{
  authenticationToken,
  guid,
  key,
  value
}

function setResourceApplicationDataEntry_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function setResourceApplicationDataEntry_args:write(oprot)
  oprot:writeStructBegin('setResourceApplicationDataEntry_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.key then
    oprot:writeFieldBegin('key', TType.STRING, 3)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  if self.value then
    oprot:writeFieldBegin('value', TType.STRING, 4)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

setResourceApplicationDataEntry_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function setResourceApplicationDataEntry_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function setResourceApplicationDataEntry_result:write(oprot)
  oprot:writeStructBegin('setResourceApplicationDataEntry_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unsetResourceApplicationDataEntry_args = __TObject:new{
  authenticationToken,
  guid,
  key
}

function unsetResourceApplicationDataEntry_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unsetResourceApplicationDataEntry_args:write(oprot)
  oprot:writeStructBegin('unsetResourceApplicationDataEntry_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.key then
    oprot:writeFieldBegin('key', TType.STRING, 3)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

unsetResourceApplicationDataEntry_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function unsetResourceApplicationDataEntry_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function unsetResourceApplicationDataEntry_result:write(oprot)
  oprot:writeStructBegin('unsetResourceApplicationDataEntry_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateResource_args = __TObject:new{
  authenticationToken,
  resource
}

function updateResource_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.resource = Resource:new{}
        self.resource:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateResource_args:write(oprot)
  oprot:writeStructBegin('updateResource_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.resource then
    oprot:writeFieldBegin('resource', TType.STRUCT, 2)
    self.resource:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateResource_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function updateResource_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateResource_result:write(oprot)
  oprot:writeStructBegin('updateResource_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceData_args = __TObject:new{
  authenticationToken,
  guid
}

function getResourceData_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceData_args:write(oprot)
  oprot:writeStructBegin('getResourceData_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceData_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getResourceData_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceData_result:write(oprot)
  oprot:writeStructBegin('getResourceData_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceByHash_args = __TObject:new{
  authenticationToken,
  noteGuid,
  contentHash,
  withData,
  withRecognition,
  withAlternateData
}

function getResourceByHash_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.noteGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.contentHash = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.withData = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.withRecognition = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.withAlternateData = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceByHash_args:write(oprot)
  oprot:writeStructBegin('getResourceByHash_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.noteGuid then
    oprot:writeFieldBegin('noteGuid', TType.STRING, 2)
    oprot:writeString(self.noteGuid)
    oprot:writeFieldEnd()
  end
  if self.contentHash then
    oprot:writeFieldBegin('contentHash', TType.STRING, 3)
    oprot:writeString(self.contentHash)
    oprot:writeFieldEnd()
  end
  if self.withData then
    oprot:writeFieldBegin('withData', TType.BOOL, 4)
    oprot:writeBool(self.withData)
    oprot:writeFieldEnd()
  end
  if self.withRecognition then
    oprot:writeFieldBegin('withRecognition', TType.BOOL, 5)
    oprot:writeBool(self.withRecognition)
    oprot:writeFieldEnd()
  end
  if self.withAlternateData then
    oprot:writeFieldBegin('withAlternateData', TType.BOOL, 6)
    oprot:writeBool(self.withAlternateData)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceByHash_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getResourceByHash_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Resource:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceByHash_result:write(oprot)
  oprot:writeStructBegin('getResourceByHash_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceRecognition_args = __TObject:new{
  authenticationToken,
  guid
}

function getResourceRecognition_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceRecognition_args:write(oprot)
  oprot:writeStructBegin('getResourceRecognition_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceRecognition_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getResourceRecognition_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceRecognition_result:write(oprot)
  oprot:writeStructBegin('getResourceRecognition_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceAlternateData_args = __TObject:new{
  authenticationToken,
  guid
}

function getResourceAlternateData_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceAlternateData_args:write(oprot)
  oprot:writeStructBegin('getResourceAlternateData_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceAlternateData_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getResourceAlternateData_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceAlternateData_result:write(oprot)
  oprot:writeStructBegin('getResourceAlternateData_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceAttributes_args = __TObject:new{
  authenticationToken,
  guid
}

function getResourceAttributes_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceAttributes_args:write(oprot)
  oprot:writeStructBegin('getResourceAttributes_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getResourceAttributes_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function getResourceAttributes_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = ResourceAttributes:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getResourceAttributes_result:write(oprot)
  oprot:writeStructBegin('getResourceAttributes_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPublicNotebook_args = __TObject:new{
  userId,
  publicUri
}

function getPublicNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.userId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.publicUri = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPublicNotebook_args:write(oprot)
  oprot:writeStructBegin('getPublicNotebook_args')
  if self.userId then
    oprot:writeFieldBegin('userId', TType.I32, 1)
    oprot:writeI32(self.userId)
    oprot:writeFieldEnd()
  end
  if self.publicUri then
    oprot:writeFieldBegin('publicUri', TType.STRING, 2)
    oprot:writeString(self.publicUri)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPublicNotebook_result = __TObject:new{
  success,
  systemException,
  notFoundException
}

function getPublicNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Notebook:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPublicNotebook_result:write(oprot)
  oprot:writeStructBegin('getPublicNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 1)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createSharedNotebook_args = __TObject:new{
  authenticationToken,
  sharedNotebook
}

function createSharedNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.sharedNotebook = SharedNotebook:new{}
        self.sharedNotebook:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createSharedNotebook_args:write(oprot)
  oprot:writeStructBegin('createSharedNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.sharedNotebook then
    oprot:writeFieldBegin('sharedNotebook', TType.STRUCT, 2)
    self.sharedNotebook:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createSharedNotebook_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function createSharedNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SharedNotebook:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createSharedNotebook_result:write(oprot)
  oprot:writeStructBegin('createSharedNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSharedNotebook_args = __TObject:new{
  authenticationToken,
  sharedNotebook
}

function updateSharedNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.sharedNotebook = SharedNotebook:new{}
        self.sharedNotebook:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSharedNotebook_args:write(oprot)
  oprot:writeStructBegin('updateSharedNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.sharedNotebook then
    oprot:writeFieldBegin('sharedNotebook', TType.STRUCT, 2)
    self.sharedNotebook:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateSharedNotebook_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function updateSharedNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateSharedNotebook_result:write(oprot)
  oprot:writeStructBegin('updateSharedNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

setSharedNotebookRecipientSettings_args = __TObject:new{
  authenticationToken,
  sharedNotebookId,
  recipientSettings
}

function setSharedNotebookRecipientSettings_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.sharedNotebookId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.recipientSettings = SharedNotebookRecipientSettings:new{}
        self.recipientSettings:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function setSharedNotebookRecipientSettings_args:write(oprot)
  oprot:writeStructBegin('setSharedNotebookRecipientSettings_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.sharedNotebookId then
    oprot:writeFieldBegin('sharedNotebookId', TType.I64, 2)
    oprot:writeI64(self.sharedNotebookId)
    oprot:writeFieldEnd()
  end
  if self.recipientSettings then
    oprot:writeFieldBegin('recipientSettings', TType.STRUCT, 3)
    self.recipientSettings:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

setSharedNotebookRecipientSettings_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function setSharedNotebookRecipientSettings_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function setSharedNotebookRecipientSettings_result:write(oprot)
  oprot:writeStructBegin('setSharedNotebookRecipientSettings_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendMessageToSharedNotebookMembers_args = __TObject:new{
  authenticationToken,
  notebookGuid,
  messageText,
  recipients
}

function sendMessageToSharedNotebookMembers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.notebookGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.messageText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.recipients = {}
        local _etype211, _size208 = iprot:readListBegin()
        for _i=1,_size208 do
          _elem212 = iprot:readString()
          table.insert(self.recipients, _elem212)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendMessageToSharedNotebookMembers_args:write(oprot)
  oprot:writeStructBegin('sendMessageToSharedNotebookMembers_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.notebookGuid then
    oprot:writeFieldBegin('notebookGuid', TType.STRING, 2)
    oprot:writeString(self.notebookGuid)
    oprot:writeFieldEnd()
  end
  if self.messageText then
    oprot:writeFieldBegin('messageText', TType.STRING, 3)
    oprot:writeString(self.messageText)
    oprot:writeFieldEnd()
  end
  if self.recipients then
    oprot:writeFieldBegin('recipients', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.recipients)
    for _,iter213 in ipairs(self.recipients) do
      oprot:writeString(iter213)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

sendMessageToSharedNotebookMembers_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function sendMessageToSharedNotebookMembers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function sendMessageToSharedNotebookMembers_result:write(oprot)
  oprot:writeStructBegin('sendMessageToSharedNotebookMembers_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listSharedNotebooks_args = __TObject:new{
  authenticationToken
}

function listSharedNotebooks_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listSharedNotebooks_args:write(oprot)
  oprot:writeStructBegin('listSharedNotebooks_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listSharedNotebooks_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function listSharedNotebooks_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype217, _size214 = iprot:readListBegin()
        for _i=1,_size214 do
          _elem218 = SharedNotebook:new{}
          _elem218:read(iprot)
          table.insert(self.success, _elem218)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listSharedNotebooks_result:write(oprot)
  oprot:writeStructBegin('listSharedNotebooks_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter219 in ipairs(self.success) do
      iter219:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeSharedNotebooks_args = __TObject:new{
  authenticationToken,
  sharedNotebookIds
}

function expungeSharedNotebooks_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.sharedNotebookIds = {}
        local _etype223, _size220 = iprot:readListBegin()
        for _i=1,_size220 do
          _elem224 = iprot:readI64()
          table.insert(self.sharedNotebookIds, _elem224)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeSharedNotebooks_args:write(oprot)
  oprot:writeStructBegin('expungeSharedNotebooks_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.sharedNotebookIds then
    oprot:writeFieldBegin('sharedNotebookIds', TType.LIST, 2)
    oprot:writeListBegin(TType.I64, #self.sharedNotebookIds)
    for _,iter225 in ipairs(self.sharedNotebookIds) do
      oprot:writeI64(iter225)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeSharedNotebooks_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function expungeSharedNotebooks_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeSharedNotebooks_result:write(oprot)
  oprot:writeStructBegin('expungeSharedNotebooks_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createLinkedNotebook_args = __TObject:new{
  authenticationToken,
  linkedNotebook
}

function createLinkedNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.linkedNotebook = LinkedNotebook:new{}
        self.linkedNotebook:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createLinkedNotebook_args:write(oprot)
  oprot:writeStructBegin('createLinkedNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.linkedNotebook then
    oprot:writeFieldBegin('linkedNotebook', TType.STRUCT, 2)
    self.linkedNotebook:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

createLinkedNotebook_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function createLinkedNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = LinkedNotebook:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function createLinkedNotebook_result:write(oprot)
  oprot:writeStructBegin('createLinkedNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateLinkedNotebook_args = __TObject:new{
  authenticationToken,
  linkedNotebook
}

function updateLinkedNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.linkedNotebook = LinkedNotebook:new{}
        self.linkedNotebook:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateLinkedNotebook_args:write(oprot)
  oprot:writeStructBegin('updateLinkedNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.linkedNotebook then
    oprot:writeFieldBegin('linkedNotebook', TType.STRUCT, 2)
    self.linkedNotebook:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

updateLinkedNotebook_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function updateLinkedNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateLinkedNotebook_result:write(oprot)
  oprot:writeStructBegin('updateLinkedNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listLinkedNotebooks_args = __TObject:new{
  authenticationToken
}

function listLinkedNotebooks_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listLinkedNotebooks_args:write(oprot)
  oprot:writeStructBegin('listLinkedNotebooks_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

listLinkedNotebooks_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function listLinkedNotebooks_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype229, _size226 = iprot:readListBegin()
        for _i=1,_size226 do
          _elem230 = LinkedNotebook:new{}
          _elem230:read(iprot)
          table.insert(self.success, _elem230)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function listLinkedNotebooks_result:write(oprot)
  oprot:writeStructBegin('listLinkedNotebooks_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter231 in ipairs(self.success) do
      iter231:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeLinkedNotebook_args = __TObject:new{
  authenticationToken,
  guid
}

function expungeLinkedNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeLinkedNotebook_args:write(oprot)
  oprot:writeStructBegin('expungeLinkedNotebook_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

expungeLinkedNotebook_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function expungeLinkedNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function expungeLinkedNotebook_result:write(oprot)
  oprot:writeStructBegin('expungeLinkedNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

authenticateToSharedNotebook_args = __TObject:new{
  shareKey,
  authenticationToken
}

function authenticateToSharedNotebook_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.shareKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authenticateToSharedNotebook_args:write(oprot)
  oprot:writeStructBegin('authenticateToSharedNotebook_args')
  if self.shareKey then
    oprot:writeFieldBegin('shareKey', TType.STRING, 1)
    oprot:writeString(self.shareKey)
    oprot:writeFieldEnd()
  end
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 2)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

authenticateToSharedNotebook_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function authenticateToSharedNotebook_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = AuthenticationResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authenticateToSharedNotebook_result:write(oprot)
  oprot:writeStructBegin('authenticateToSharedNotebook_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSharedNotebookByAuth_args = __TObject:new{
  authenticationToken
}

function getSharedNotebookByAuth_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSharedNotebookByAuth_args:write(oprot)
  oprot:writeStructBegin('getSharedNotebookByAuth_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getSharedNotebookByAuth_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function getSharedNotebookByAuth_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = SharedNotebook:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getSharedNotebookByAuth_result:write(oprot)
  oprot:writeStructBegin('getSharedNotebookByAuth_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

emailNote_args = __TObject:new{
  authenticationToken,
  parameters
}

function emailNote_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.parameters = NoteEmailParameters:new{}
        self.parameters:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function emailNote_args:write(oprot)
  oprot:writeStructBegin('emailNote_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.parameters then
    oprot:writeFieldBegin('parameters', TType.STRUCT, 2)
    self.parameters:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

emailNote_result = __TObject:new{
  userException,
  notFoundException,
  systemException
}

function emailNote_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function emailNote_result:write(oprot)
  oprot:writeStructBegin('emailNote_result')
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

shareNote_args = __TObject:new{
  authenticationToken,
  guid
}

function shareNote_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function shareNote_args:write(oprot)
  oprot:writeStructBegin('shareNote_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

shareNote_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function shareNote_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function shareNote_result:write(oprot)
  oprot:writeStructBegin('shareNote_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

stopSharingNote_args = __TObject:new{
  authenticationToken,
  guid
}

function stopSharingNote_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function stopSharingNote_args:write(oprot)
  oprot:writeStructBegin('stopSharingNote_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 2)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

stopSharingNote_result = __TObject:new{
  userException,
  notFoundException,
  systemException
}

function stopSharingNote_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function stopSharingNote_result:write(oprot)
  oprot:writeStructBegin('stopSharingNote_result')
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

authenticateToSharedNote_args = __TObject:new{
  guid,
  noteKey,
  authenticationToken
}

function authenticateToSharedNote_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.noteKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authenticateToSharedNote_args:write(oprot)
  oprot:writeStructBegin('authenticateToSharedNote_args')
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 1)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.noteKey then
    oprot:writeFieldBegin('noteKey', TType.STRING, 2)
    oprot:writeString(self.noteKey)
    oprot:writeFieldEnd()
  end
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 3)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

authenticateToSharedNote_result = __TObject:new{
  success,
  userException,
  notFoundException,
  systemException
}

function authenticateToSharedNote_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = AuthenticationResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authenticateToSharedNote_result:write(oprot)
  oprot:writeStructBegin('authenticateToSharedNote_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 2)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 3)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findRelated_args = __TObject:new{
  authenticationToken,
  query,
  resultSpec
}

function findRelated_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.query = RelatedQuery:new{}
        self.query:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.resultSpec = RelatedResultSpec:new{}
        self.resultSpec:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findRelated_args:write(oprot)
  oprot:writeStructBegin('findRelated_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.query then
    oprot:writeFieldBegin('query', TType.STRUCT, 2)
    self.query:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.resultSpec then
    oprot:writeFieldBegin('resultSpec', TType.STRUCT, 3)
    self.resultSpec:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

findRelated_result = __TObject:new{
  success,
  userException,
  systemException,
  notFoundException
}

function findRelated_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = RelatedResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function findRelated_result:write(oprot)
  oprot:writeStructBegin('findRelated_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 3)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
