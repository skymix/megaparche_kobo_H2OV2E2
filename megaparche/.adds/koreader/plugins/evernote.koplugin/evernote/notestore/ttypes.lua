--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'thrift.Thrift'
require 'evernote.notestore.constants'

SyncState = __TObject:new{
  currentTime,
  fullSyncBefore,
  updateCount,
  uploaded
}

function SyncState:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.currentTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.fullSyncBefore = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.updateCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.uploaded = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SyncState:write(oprot)
  oprot:writeStructBegin('SyncState')
  if self.currentTime then
    oprot:writeFieldBegin('currentTime', TType.I64, 1)
    oprot:writeI64(self.currentTime)
    oprot:writeFieldEnd()
  end
  if self.fullSyncBefore then
    oprot:writeFieldBegin('fullSyncBefore', TType.I64, 2)
    oprot:writeI64(self.fullSyncBefore)
    oprot:writeFieldEnd()
  end
  if self.updateCount then
    oprot:writeFieldBegin('updateCount', TType.I32, 3)
    oprot:writeI32(self.updateCount)
    oprot:writeFieldEnd()
  end
  if self.uploaded then
    oprot:writeFieldBegin('uploaded', TType.I64, 4)
    oprot:writeI64(self.uploaded)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SyncChunk = __TObject:new{
  currentTime,
  chunkHighUSN,
  updateCount,
  notes,
  notebooks,
  tags,
  searches,
  resources,
  expungedNotes,
  expungedNotebooks,
  expungedTags,
  expungedSearches,
  linkedNotebooks,
  expungedLinkedNotebooks
}

function SyncChunk:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.currentTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.chunkHighUSN = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.updateCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.notes = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          _elem4 = Note:new{}
          _elem4:read(iprot)
          table.insert(self.notes, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.notebooks = {}
        local _etype8, _size5 = iprot:readListBegin()
        for _i=1,_size5 do
          _elem9 = Notebook:new{}
          _elem9:read(iprot)
          table.insert(self.notebooks, _elem9)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.LIST then
        self.tags = {}
        local _etype13, _size10 = iprot:readListBegin()
        for _i=1,_size10 do
          _elem14 = Tag:new{}
          _elem14:read(iprot)
          table.insert(self.tags, _elem14)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.LIST then
        self.searches = {}
        local _etype18, _size15 = iprot:readListBegin()
        for _i=1,_size15 do
          _elem19 = SavedSearch:new{}
          _elem19:read(iprot)
          table.insert(self.searches, _elem19)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.LIST then
        self.resources = {}
        local _etype23, _size20 = iprot:readListBegin()
        for _i=1,_size20 do
          _elem24 = Resource:new{}
          _elem24:read(iprot)
          table.insert(self.resources, _elem24)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.LIST then
        self.expungedNotes = {}
        local _etype28, _size25 = iprot:readListBegin()
        for _i=1,_size25 do
          _elem29 = iprot:readString()
          table.insert(self.expungedNotes, _elem29)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.expungedNotebooks = {}
        local _etype33, _size30 = iprot:readListBegin()
        for _i=1,_size30 do
          _elem34 = iprot:readString()
          table.insert(self.expungedNotebooks, _elem34)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.expungedTags = {}
        local _etype38, _size35 = iprot:readListBegin()
        for _i=1,_size35 do
          _elem39 = iprot:readString()
          table.insert(self.expungedTags, _elem39)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.expungedSearches = {}
        local _etype43, _size40 = iprot:readListBegin()
        for _i=1,_size40 do
          _elem44 = iprot:readString()
          table.insert(self.expungedSearches, _elem44)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.LIST then
        self.linkedNotebooks = {}
        local _etype48, _size45 = iprot:readListBegin()
        for _i=1,_size45 do
          _elem49 = LinkedNotebook:new{}
          _elem49:read(iprot)
          table.insert(self.linkedNotebooks, _elem49)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.LIST then
        self.expungedLinkedNotebooks = {}
        local _etype53, _size50 = iprot:readListBegin()
        for _i=1,_size50 do
          _elem54 = iprot:readString()
          table.insert(self.expungedLinkedNotebooks, _elem54)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SyncChunk:write(oprot)
  oprot:writeStructBegin('SyncChunk')
  if self.currentTime then
    oprot:writeFieldBegin('currentTime', TType.I64, 1)
    oprot:writeI64(self.currentTime)
    oprot:writeFieldEnd()
  end
  if self.chunkHighUSN then
    oprot:writeFieldBegin('chunkHighUSN', TType.I32, 2)
    oprot:writeI32(self.chunkHighUSN)
    oprot:writeFieldEnd()
  end
  if self.updateCount then
    oprot:writeFieldBegin('updateCount', TType.I32, 3)
    oprot:writeI32(self.updateCount)
    oprot:writeFieldEnd()
  end
  if self.notes then
    oprot:writeFieldBegin('notes', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.notes)
    for _,iter55 in ipairs(self.notes) do
      iter55:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.notebooks then
    oprot:writeFieldBegin('notebooks', TType.LIST, 5)
    oprot:writeListBegin(TType.STRUCT, #self.notebooks)
    for _,iter56 in ipairs(self.notebooks) do
      iter56:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.tags then
    oprot:writeFieldBegin('tags', TType.LIST, 6)
    oprot:writeListBegin(TType.STRUCT, #self.tags)
    for _,iter57 in ipairs(self.tags) do
      iter57:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.searches then
    oprot:writeFieldBegin('searches', TType.LIST, 7)
    oprot:writeListBegin(TType.STRUCT, #self.searches)
    for _,iter58 in ipairs(self.searches) do
      iter58:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.resources then
    oprot:writeFieldBegin('resources', TType.LIST, 8)
    oprot:writeListBegin(TType.STRUCT, #self.resources)
    for _,iter59 in ipairs(self.resources) do
      iter59:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.expungedNotes then
    oprot:writeFieldBegin('expungedNotes', TType.LIST, 9)
    oprot:writeListBegin(TType.STRING, #self.expungedNotes)
    for _,iter60 in ipairs(self.expungedNotes) do
      oprot:writeString(iter60)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.expungedNotebooks then
    oprot:writeFieldBegin('expungedNotebooks', TType.LIST, 10)
    oprot:writeListBegin(TType.STRING, #self.expungedNotebooks)
    for _,iter61 in ipairs(self.expungedNotebooks) do
      oprot:writeString(iter61)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.expungedTags then
    oprot:writeFieldBegin('expungedTags', TType.LIST, 11)
    oprot:writeListBegin(TType.STRING, #self.expungedTags)
    for _,iter62 in ipairs(self.expungedTags) do
      oprot:writeString(iter62)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.expungedSearches then
    oprot:writeFieldBegin('expungedSearches', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.expungedSearches)
    for _,iter63 in ipairs(self.expungedSearches) do
      oprot:writeString(iter63)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.linkedNotebooks then
    oprot:writeFieldBegin('linkedNotebooks', TType.LIST, 13)
    oprot:writeListBegin(TType.STRUCT, #self.linkedNotebooks)
    for _,iter64 in ipairs(self.linkedNotebooks) do
      iter64:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.expungedLinkedNotebooks then
    oprot:writeFieldBegin('expungedLinkedNotebooks', TType.LIST, 14)
    oprot:writeListBegin(TType.STRING, #self.expungedLinkedNotebooks)
    for _,iter65 in ipairs(self.expungedLinkedNotebooks) do
      oprot:writeString(iter65)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SyncChunkFilter = __TObject:new{
  includeNotes,
  includeNoteResources,
  includeNoteAttributes,
  includeNotebooks,
  includeTags,
  includeSearches,
  includeResources,
  includeLinkedNotebooks,
  includeExpunged,
  includeNoteApplicationDataFullMap,
  includeResourceApplicationDataFullMap,
  includeNoteResourceApplicationDataFullMap,
  requireNoteContentClass
}

function SyncChunkFilter:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.includeNotes = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.includeNoteResources = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.includeNoteAttributes = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.includeNotebooks = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.includeTags = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.includeSearches = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.includeResources = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.BOOL then
        self.includeLinkedNotebooks = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.BOOL then
        self.includeExpunged = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.includeNoteApplicationDataFullMap = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.BOOL then
        self.includeResourceApplicationDataFullMap = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.BOOL then
        self.includeNoteResourceApplicationDataFullMap = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.requireNoteContentClass = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SyncChunkFilter:write(oprot)
  oprot:writeStructBegin('SyncChunkFilter')
  if self.includeNotes then
    oprot:writeFieldBegin('includeNotes', TType.BOOL, 1)
    oprot:writeBool(self.includeNotes)
    oprot:writeFieldEnd()
  end
  if self.includeNoteResources then
    oprot:writeFieldBegin('includeNoteResources', TType.BOOL, 2)
    oprot:writeBool(self.includeNoteResources)
    oprot:writeFieldEnd()
  end
  if self.includeNoteAttributes then
    oprot:writeFieldBegin('includeNoteAttributes', TType.BOOL, 3)
    oprot:writeBool(self.includeNoteAttributes)
    oprot:writeFieldEnd()
  end
  if self.includeNotebooks then
    oprot:writeFieldBegin('includeNotebooks', TType.BOOL, 4)
    oprot:writeBool(self.includeNotebooks)
    oprot:writeFieldEnd()
  end
  if self.includeTags then
    oprot:writeFieldBegin('includeTags', TType.BOOL, 5)
    oprot:writeBool(self.includeTags)
    oprot:writeFieldEnd()
  end
  if self.includeSearches then
    oprot:writeFieldBegin('includeSearches', TType.BOOL, 6)
    oprot:writeBool(self.includeSearches)
    oprot:writeFieldEnd()
  end
  if self.includeResources then
    oprot:writeFieldBegin('includeResources', TType.BOOL, 7)
    oprot:writeBool(self.includeResources)
    oprot:writeFieldEnd()
  end
  if self.includeLinkedNotebooks then
    oprot:writeFieldBegin('includeLinkedNotebooks', TType.BOOL, 8)
    oprot:writeBool(self.includeLinkedNotebooks)
    oprot:writeFieldEnd()
  end
  if self.includeExpunged then
    oprot:writeFieldBegin('includeExpunged', TType.BOOL, 9)
    oprot:writeBool(self.includeExpunged)
    oprot:writeFieldEnd()
  end
  if self.includeNoteApplicationDataFullMap then
    oprot:writeFieldBegin('includeNoteApplicationDataFullMap', TType.BOOL, 10)
    oprot:writeBool(self.includeNoteApplicationDataFullMap)
    oprot:writeFieldEnd()
  end
  if self.includeResourceApplicationDataFullMap then
    oprot:writeFieldBegin('includeResourceApplicationDataFullMap', TType.BOOL, 12)
    oprot:writeBool(self.includeResourceApplicationDataFullMap)
    oprot:writeFieldEnd()
  end
  if self.includeNoteResourceApplicationDataFullMap then
    oprot:writeFieldBegin('includeNoteResourceApplicationDataFullMap', TType.BOOL, 13)
    oprot:writeBool(self.includeNoteResourceApplicationDataFullMap)
    oprot:writeFieldEnd()
  end
  if self.requireNoteContentClass then
    oprot:writeFieldBegin('requireNoteContentClass', TType.STRING, 11)
    oprot:writeString(self.requireNoteContentClass)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NoteFilter = __TObject:new{
  order,
  ascending,
  words,
  notebookGuid,
  tagGuids,
  timeZone,
  inactive,
  emphasized
}

function NoteFilter:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.order = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.ascending = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.words = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.notebookGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.tagGuids = {}
        local _etype69, _size66 = iprot:readListBegin()
        for _i=1,_size66 do
          _elem70 = iprot:readString()
          table.insert(self.tagGuids, _elem70)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.timeZone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.inactive = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.emphasized = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NoteFilter:write(oprot)
  oprot:writeStructBegin('NoteFilter')
  if self.order then
    oprot:writeFieldBegin('order', TType.I32, 1)
    oprot:writeI32(self.order)
    oprot:writeFieldEnd()
  end
  if self.ascending then
    oprot:writeFieldBegin('ascending', TType.BOOL, 2)
    oprot:writeBool(self.ascending)
    oprot:writeFieldEnd()
  end
  if self.words then
    oprot:writeFieldBegin('words', TType.STRING, 3)
    oprot:writeString(self.words)
    oprot:writeFieldEnd()
  end
  if self.notebookGuid then
    oprot:writeFieldBegin('notebookGuid', TType.STRING, 4)
    oprot:writeString(self.notebookGuid)
    oprot:writeFieldEnd()
  end
  if self.tagGuids then
    oprot:writeFieldBegin('tagGuids', TType.LIST, 5)
    oprot:writeListBegin(TType.STRING, #self.tagGuids)
    for _,iter71 in ipairs(self.tagGuids) do
      oprot:writeString(iter71)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.timeZone then
    oprot:writeFieldBegin('timeZone', TType.STRING, 6)
    oprot:writeString(self.timeZone)
    oprot:writeFieldEnd()
  end
  if self.inactive then
    oprot:writeFieldBegin('inactive', TType.BOOL, 7)
    oprot:writeBool(self.inactive)
    oprot:writeFieldEnd()
  end
  if self.emphasized then
    oprot:writeFieldBegin('emphasized', TType.STRING, 8)
    oprot:writeString(self.emphasized)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NoteList = __TObject:new{
  startIndex,
  totalNotes,
  notes,
  stoppedWords,
  searchedWords,
  updateCount
}

function NoteList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.startIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.totalNotes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.notes = {}
        local _etype75, _size72 = iprot:readListBegin()
        for _i=1,_size72 do
          _elem76 = Note:new{}
          _elem76:read(iprot)
          table.insert(self.notes, _elem76)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.stoppedWords = {}
        local _etype80, _size77 = iprot:readListBegin()
        for _i=1,_size77 do
          _elem81 = iprot:readString()
          table.insert(self.stoppedWords, _elem81)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.searchedWords = {}
        local _etype85, _size82 = iprot:readListBegin()
        for _i=1,_size82 do
          _elem86 = iprot:readString()
          table.insert(self.searchedWords, _elem86)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.updateCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NoteList:write(oprot)
  oprot:writeStructBegin('NoteList')
  if self.startIndex then
    oprot:writeFieldBegin('startIndex', TType.I32, 1)
    oprot:writeI32(self.startIndex)
    oprot:writeFieldEnd()
  end
  if self.totalNotes then
    oprot:writeFieldBegin('totalNotes', TType.I32, 2)
    oprot:writeI32(self.totalNotes)
    oprot:writeFieldEnd()
  end
  if self.notes then
    oprot:writeFieldBegin('notes', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.notes)
    for _,iter87 in ipairs(self.notes) do
      iter87:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.stoppedWords then
    oprot:writeFieldBegin('stoppedWords', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.stoppedWords)
    for _,iter88 in ipairs(self.stoppedWords) do
      oprot:writeString(iter88)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.searchedWords then
    oprot:writeFieldBegin('searchedWords', TType.LIST, 5)
    oprot:writeListBegin(TType.STRING, #self.searchedWords)
    for _,iter89 in ipairs(self.searchedWords) do
      oprot:writeString(iter89)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.updateCount then
    oprot:writeFieldBegin('updateCount', TType.I32, 6)
    oprot:writeI32(self.updateCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NoteMetadata = __TObject:new{
  guid,
  title,
  contentLength,
  created,
  updated,
  deleted,
  updateSequenceNum,
  notebookGuid,
  tagGuids,
  attributes,
  largestResourceMime,
  largestResourceSize
}

function NoteMetadata:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.contentLength = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.created = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.updated = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I64 then
        self.deleted = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.updateSequenceNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.notebookGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.tagGuids = {}
        local _etype93, _size90 = iprot:readListBegin()
        for _i=1,_size90 do
          _elem94 = iprot:readString()
          table.insert(self.tagGuids, _elem94)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRUCT then
        self.attributes = NoteAttributes:new{}
        self.attributes:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.largestResourceMime = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.largestResourceSize = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NoteMetadata:write(oprot)
  oprot:writeStructBegin('NoteMetadata')
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 1)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.title then
    oprot:writeFieldBegin('title', TType.STRING, 2)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.contentLength then
    oprot:writeFieldBegin('contentLength', TType.I32, 5)
    oprot:writeI32(self.contentLength)
    oprot:writeFieldEnd()
  end
  if self.created then
    oprot:writeFieldBegin('created', TType.I64, 6)
    oprot:writeI64(self.created)
    oprot:writeFieldEnd()
  end
  if self.updated then
    oprot:writeFieldBegin('updated', TType.I64, 7)
    oprot:writeI64(self.updated)
    oprot:writeFieldEnd()
  end
  if self.deleted then
    oprot:writeFieldBegin('deleted', TType.I64, 8)
    oprot:writeI64(self.deleted)
    oprot:writeFieldEnd()
  end
  if self.updateSequenceNum then
    oprot:writeFieldBegin('updateSequenceNum', TType.I32, 10)
    oprot:writeI32(self.updateSequenceNum)
    oprot:writeFieldEnd()
  end
  if self.notebookGuid then
    oprot:writeFieldBegin('notebookGuid', TType.STRING, 11)
    oprot:writeString(self.notebookGuid)
    oprot:writeFieldEnd()
  end
  if self.tagGuids then
    oprot:writeFieldBegin('tagGuids', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.tagGuids)
    for _,iter95 in ipairs(self.tagGuids) do
      oprot:writeString(iter95)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.attributes then
    oprot:writeFieldBegin('attributes', TType.STRUCT, 14)
    self.attributes:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.largestResourceMime then
    oprot:writeFieldBegin('largestResourceMime', TType.STRING, 20)
    oprot:writeString(self.largestResourceMime)
    oprot:writeFieldEnd()
  end
  if self.largestResourceSize then
    oprot:writeFieldBegin('largestResourceSize', TType.I32, 21)
    oprot:writeI32(self.largestResourceSize)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotesMetadataList = __TObject:new{
  startIndex,
  totalNotes,
  notes,
  stoppedWords,
  searchedWords,
  updateCount
}

function NotesMetadataList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.startIndex = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.totalNotes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.notes = {}
        local _etype99, _size96 = iprot:readListBegin()
        for _i=1,_size96 do
          _elem100 = NoteMetadata:new{}
          _elem100:read(iprot)
          table.insert(self.notes, _elem100)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.stoppedWords = {}
        local _etype104, _size101 = iprot:readListBegin()
        for _i=1,_size101 do
          _elem105 = iprot:readString()
          table.insert(self.stoppedWords, _elem105)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.searchedWords = {}
        local _etype109, _size106 = iprot:readListBegin()
        for _i=1,_size106 do
          _elem110 = iprot:readString()
          table.insert(self.searchedWords, _elem110)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.updateCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotesMetadataList:write(oprot)
  oprot:writeStructBegin('NotesMetadataList')
  if self.startIndex then
    oprot:writeFieldBegin('startIndex', TType.I32, 1)
    oprot:writeI32(self.startIndex)
    oprot:writeFieldEnd()
  end
  if self.totalNotes then
    oprot:writeFieldBegin('totalNotes', TType.I32, 2)
    oprot:writeI32(self.totalNotes)
    oprot:writeFieldEnd()
  end
  if self.notes then
    oprot:writeFieldBegin('notes', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.notes)
    for _,iter111 in ipairs(self.notes) do
      iter111:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.stoppedWords then
    oprot:writeFieldBegin('stoppedWords', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.stoppedWords)
    for _,iter112 in ipairs(self.stoppedWords) do
      oprot:writeString(iter112)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.searchedWords then
    oprot:writeFieldBegin('searchedWords', TType.LIST, 5)
    oprot:writeListBegin(TType.STRING, #self.searchedWords)
    for _,iter113 in ipairs(self.searchedWords) do
      oprot:writeString(iter113)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.updateCount then
    oprot:writeFieldBegin('updateCount', TType.I32, 6)
    oprot:writeI32(self.updateCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotesMetadataResultSpec = __TObject:new{
  includeTitle,
  includeContentLength,
  includeCreated,
  includeUpdated,
  includeDeleted,
  includeUpdateSequenceNum,
  includeNotebookGuid,
  includeTagGuids,
  includeAttributes,
  includeLargestResourceMime,
  includeLargestResourceSize
}

function NotesMetadataResultSpec:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.includeTitle = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.includeContentLength = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.includeCreated = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.includeUpdated = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.BOOL then
        self.includeDeleted = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.includeUpdateSequenceNum = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.BOOL then
        self.includeNotebookGuid = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.BOOL then
        self.includeTagGuids = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.BOOL then
        self.includeAttributes = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.BOOL then
        self.includeLargestResourceMime = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.BOOL then
        self.includeLargestResourceSize = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotesMetadataResultSpec:write(oprot)
  oprot:writeStructBegin('NotesMetadataResultSpec')
  if self.includeTitle then
    oprot:writeFieldBegin('includeTitle', TType.BOOL, 2)
    oprot:writeBool(self.includeTitle)
    oprot:writeFieldEnd()
  end
  if self.includeContentLength then
    oprot:writeFieldBegin('includeContentLength', TType.BOOL, 5)
    oprot:writeBool(self.includeContentLength)
    oprot:writeFieldEnd()
  end
  if self.includeCreated then
    oprot:writeFieldBegin('includeCreated', TType.BOOL, 6)
    oprot:writeBool(self.includeCreated)
    oprot:writeFieldEnd()
  end
  if self.includeUpdated then
    oprot:writeFieldBegin('includeUpdated', TType.BOOL, 7)
    oprot:writeBool(self.includeUpdated)
    oprot:writeFieldEnd()
  end
  if self.includeDeleted then
    oprot:writeFieldBegin('includeDeleted', TType.BOOL, 8)
    oprot:writeBool(self.includeDeleted)
    oprot:writeFieldEnd()
  end
  if self.includeUpdateSequenceNum then
    oprot:writeFieldBegin('includeUpdateSequenceNum', TType.BOOL, 10)
    oprot:writeBool(self.includeUpdateSequenceNum)
    oprot:writeFieldEnd()
  end
  if self.includeNotebookGuid then
    oprot:writeFieldBegin('includeNotebookGuid', TType.BOOL, 11)
    oprot:writeBool(self.includeNotebookGuid)
    oprot:writeFieldEnd()
  end
  if self.includeTagGuids then
    oprot:writeFieldBegin('includeTagGuids', TType.BOOL, 12)
    oprot:writeBool(self.includeTagGuids)
    oprot:writeFieldEnd()
  end
  if self.includeAttributes then
    oprot:writeFieldBegin('includeAttributes', TType.BOOL, 14)
    oprot:writeBool(self.includeAttributes)
    oprot:writeFieldEnd()
  end
  if self.includeLargestResourceMime then
    oprot:writeFieldBegin('includeLargestResourceMime', TType.BOOL, 20)
    oprot:writeBool(self.includeLargestResourceMime)
    oprot:writeFieldEnd()
  end
  if self.includeLargestResourceSize then
    oprot:writeFieldBegin('includeLargestResourceSize', TType.BOOL, 21)
    oprot:writeBool(self.includeLargestResourceSize)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NoteCollectionCounts = __TObject:new{
  notebookCounts,
  tagCounts,
  trashCount
}

function NoteCollectionCounts:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.MAP then
        self.notebookCounts = {}
        local _ktype115, _vtype116, _size114 = iprot:readMapBegin()
        for _i=1,_size114 do
          _key118 = iprot:readString()
          _val119 = iprot:readI32()
          self.notebookCounts[_key118] = _val119
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.tagCounts = {}
        local _ktype121, _vtype122, _size120 = iprot:readMapBegin()
        for _i=1,_size120 do
          _key124 = iprot:readString()
          _val125 = iprot:readI32()
          self.tagCounts[_key124] = _val125
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.trashCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NoteCollectionCounts:write(oprot)
  oprot:writeStructBegin('NoteCollectionCounts')
  if self.notebookCounts then
    oprot:writeFieldBegin('notebookCounts', TType.MAP, 1)
    oprot:writeMapBegin(TType.STRING, TType.I32, #self.notebookCounts)
    for kiter126,viter127 in pairs(self.notebookCounts) do
      oprot:writeString(kiter126)
      oprot:writeI32(viter127)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.tagCounts then
    oprot:writeFieldBegin('tagCounts', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.I32, #self.tagCounts)
    for kiter128,viter129 in pairs(self.tagCounts) do
      oprot:writeString(kiter128)
      oprot:writeI32(viter129)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.trashCount then
    oprot:writeFieldBegin('trashCount', TType.I32, 3)
    oprot:writeI32(self.trashCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NoteEmailParameters = __TObject:new{
  guid,
  note,
  toAddresses,
  ccAddresses,
  subject,
  message
}

function NoteEmailParameters:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.guid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.note = Note:new{}
        self.note:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.toAddresses = {}
        local _etype133, _size130 = iprot:readListBegin()
        for _i=1,_size130 do
          _elem134 = iprot:readString()
          table.insert(self.toAddresses, _elem134)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.ccAddresses = {}
        local _etype138, _size135 = iprot:readListBegin()
        for _i=1,_size135 do
          _elem139 = iprot:readString()
          table.insert(self.ccAddresses, _elem139)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.subject = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.message = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NoteEmailParameters:write(oprot)
  oprot:writeStructBegin('NoteEmailParameters')
  if self.guid then
    oprot:writeFieldBegin('guid', TType.STRING, 1)
    oprot:writeString(self.guid)
    oprot:writeFieldEnd()
  end
  if self.note then
    oprot:writeFieldBegin('note', TType.STRUCT, 2)
    self.note:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.toAddresses then
    oprot:writeFieldBegin('toAddresses', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.toAddresses)
    for _,iter140 in ipairs(self.toAddresses) do
      oprot:writeString(iter140)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.ccAddresses then
    oprot:writeFieldBegin('ccAddresses', TType.LIST, 4)
    oprot:writeListBegin(TType.STRING, #self.ccAddresses)
    for _,iter141 in ipairs(self.ccAddresses) do
      oprot:writeString(iter141)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.subject then
    oprot:writeFieldBegin('subject', TType.STRING, 5)
    oprot:writeString(self.subject)
    oprot:writeFieldEnd()
  end
  if self.message then
    oprot:writeFieldBegin('message', TType.STRING, 6)
    oprot:writeString(self.message)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NoteVersionId = __TObject:new{
  updateSequenceNum,
  updated,
  saved,
  title
}

function NoteVersionId:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.updateSequenceNum = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.updated = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.saved = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NoteVersionId:write(oprot)
  oprot:writeStructBegin('NoteVersionId')
  if self.updateSequenceNum then
    oprot:writeFieldBegin('updateSequenceNum', TType.I32, 1)
    oprot:writeI32(self.updateSequenceNum)
    oprot:writeFieldEnd()
  end
  if self.updated then
    oprot:writeFieldBegin('updated', TType.I64, 2)
    oprot:writeI64(self.updated)
    oprot:writeFieldEnd()
  end
  if self.saved then
    oprot:writeFieldBegin('saved', TType.I64, 3)
    oprot:writeI64(self.saved)
    oprot:writeFieldEnd()
  end
  if self.title then
    oprot:writeFieldBegin('title', TType.STRING, 4)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ClientUsageMetrics = __TObject:new{
  sessions
}

function ClientUsageMetrics:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.sessions = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ClientUsageMetrics:write(oprot)
  oprot:writeStructBegin('ClientUsageMetrics')
  if self.sessions then
    oprot:writeFieldBegin('sessions', TType.I32, 1)
    oprot:writeI32(self.sessions)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RelatedQuery = __TObject:new{
  noteGuid,
  plainText,
  filter,
  referenceUri
}

function RelatedQuery:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.noteGuid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.plainText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.filter = NoteFilter:new{}
        self.filter:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.referenceUri = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RelatedQuery:write(oprot)
  oprot:writeStructBegin('RelatedQuery')
  if self.noteGuid then
    oprot:writeFieldBegin('noteGuid', TType.STRING, 1)
    oprot:writeString(self.noteGuid)
    oprot:writeFieldEnd()
  end
  if self.plainText then
    oprot:writeFieldBegin('plainText', TType.STRING, 2)
    oprot:writeString(self.plainText)
    oprot:writeFieldEnd()
  end
  if self.filter then
    oprot:writeFieldBegin('filter', TType.STRUCT, 3)
    self.filter:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.referenceUri then
    oprot:writeFieldBegin('referenceUri', TType.STRING, 4)
    oprot:writeString(self.referenceUri)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RelatedResult = __TObject:new{
  notes,
  notebooks,
  tags,
  containingNotebooks
}

function RelatedResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.notes = {}
        local _etype145, _size142 = iprot:readListBegin()
        for _i=1,_size142 do
          _elem146 = Note:new{}
          _elem146:read(iprot)
          table.insert(self.notes, _elem146)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.notebooks = {}
        local _etype150, _size147 = iprot:readListBegin()
        for _i=1,_size147 do
          _elem151 = Notebook:new{}
          _elem151:read(iprot)
          table.insert(self.notebooks, _elem151)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.tags = {}
        local _etype155, _size152 = iprot:readListBegin()
        for _i=1,_size152 do
          _elem156 = Tag:new{}
          _elem156:read(iprot)
          table.insert(self.tags, _elem156)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.containingNotebooks = {}
        local _etype160, _size157 = iprot:readListBegin()
        for _i=1,_size157 do
          _elem161 = NotebookDescriptor:new{}
          _elem161:read(iprot)
          table.insert(self.containingNotebooks, _elem161)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RelatedResult:write(oprot)
  oprot:writeStructBegin('RelatedResult')
  if self.notes then
    oprot:writeFieldBegin('notes', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.notes)
    for _,iter162 in ipairs(self.notes) do
      iter162:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.notebooks then
    oprot:writeFieldBegin('notebooks', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.notebooks)
    for _,iter163 in ipairs(self.notebooks) do
      iter163:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.tags then
    oprot:writeFieldBegin('tags', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.tags)
    for _,iter164 in ipairs(self.tags) do
      iter164:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.containingNotebooks then
    oprot:writeFieldBegin('containingNotebooks', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.containingNotebooks)
    for _,iter165 in ipairs(self.containingNotebooks) do
      iter165:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RelatedResultSpec = __TObject:new{
  maxNotes,
  maxNotebooks,
  maxTags,
  writableNotebooksOnly,
  includeContainingNotebooks
}

function RelatedResultSpec:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.maxNotes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.maxNotebooks = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.maxTags = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.writableNotebooksOnly = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.includeContainingNotebooks = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RelatedResultSpec:write(oprot)
  oprot:writeStructBegin('RelatedResultSpec')
  if self.maxNotes then
    oprot:writeFieldBegin('maxNotes', TType.I32, 1)
    oprot:writeI32(self.maxNotes)
    oprot:writeFieldEnd()
  end
  if self.maxNotebooks then
    oprot:writeFieldBegin('maxNotebooks', TType.I32, 2)
    oprot:writeI32(self.maxNotebooks)
    oprot:writeFieldEnd()
  end
  if self.maxTags then
    oprot:writeFieldBegin('maxTags', TType.I32, 3)
    oprot:writeI32(self.maxTags)
    oprot:writeFieldEnd()
  end
  if self.writableNotebooksOnly then
    oprot:writeFieldBegin('writableNotebooksOnly', TType.BOOL, 4)
    oprot:writeBool(self.writableNotebooksOnly)
    oprot:writeFieldEnd()
  end
  if self.includeContainingNotebooks then
    oprot:writeFieldBegin('includeContainingNotebooks', TType.BOOL, 5)
    oprot:writeBool(self.includeContainingNotebooks)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
