--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'thrift.Thrift'
require 'evernote.types.ttypes'
require 'evernote.errors.ttypes'
require 'evernote.userstore.ttypes'

UserStoreClient = __TObject.new(__TClient, {
  __type = 'UserStoreClient'
})

function UserStoreClient:checkVersion(clientName, edamVersionMajor, edamVersionMinor)
  self:send_checkVersion(clientName, edamVersionMajor, edamVersionMinor)
  return self:recv_checkVersion(clientName, edamVersionMajor, edamVersionMinor)
end

function UserStoreClient:send_checkVersion(clientName, edamVersionMajor, edamVersionMinor)
  self.oprot:writeMessageBegin('checkVersion', TMessageType.CALL, self._seqid)
  local args = checkVersion_args:new{}
  args.clientName = clientName
  args.edamVersionMajor = edamVersionMajor
  args.edamVersionMinor = edamVersionMinor
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_checkVersion(clientName, edamVersionMajor, edamVersionMinor)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = checkVersion_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserStoreClient:getBootstrapInfo(locale)
  self:send_getBootstrapInfo(locale)
  return self:recv_getBootstrapInfo(locale)
end

function UserStoreClient:send_getBootstrapInfo(locale)
  self.oprot:writeMessageBegin('getBootstrapInfo', TMessageType.CALL, self._seqid)
  local args = getBootstrapInfo_args:new{}
  args.locale = locale
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_getBootstrapInfo(locale)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getBootstrapInfo_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserStoreClient:authenticate(username, password, consumerKey, consumerSecret, supportsTwoFactor)
  self:send_authenticate(username, password, consumerKey, consumerSecret, supportsTwoFactor)
  return self:recv_authenticate(username, password, consumerKey, consumerSecret, supportsTwoFactor)
end

function UserStoreClient:send_authenticate(username, password, consumerKey, consumerSecret, supportsTwoFactor)
  self.oprot:writeMessageBegin('authenticate', TMessageType.CALL, self._seqid)
  local args = authenticate_args:new{}
  args.username = username
  args.password = password
  args.consumerKey = consumerKey
  args.consumerSecret = consumerSecret
  args.supportsTwoFactor = supportsTwoFactor
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_authenticate(username, password, consumerKey, consumerSecret, supportsTwoFactor)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = authenticate_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserStoreClient:authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor)
  self:send_authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor)
  return self:recv_authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor)
end

function UserStoreClient:send_authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor)
  self.oprot:writeMessageBegin('authenticateLongSession', TMessageType.CALL, self._seqid)
  local args = authenticateLongSession_args:new{}
  args.username = username
  args.password = password
  args.consumerKey = consumerKey
  args.consumerSecret = consumerSecret
  args.deviceIdentifier = deviceIdentifier
  args.deviceDescription = deviceDescription
  args.supportsTwoFactor = supportsTwoFactor
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = authenticateLongSession_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserStoreClient:completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription)
  self:send_completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription)
  return self:recv_completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription)
end

function UserStoreClient:send_completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription)
  self.oprot:writeMessageBegin('completeTwoFactorAuthentication', TMessageType.CALL, self._seqid)
  local args = completeTwoFactorAuthentication_args:new{}
  args.authenticationToken = authenticationToken
  args.oneTimeCode = oneTimeCode
  args.deviceIdentifier = deviceIdentifier
  args.deviceDescription = deviceDescription
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = completeTwoFactorAuthentication_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserStoreClient:revokeLongSession(authenticationToken)
  self:send_revokeLongSession(authenticationToken)
  self:recv_revokeLongSession(authenticationToken)
end

function UserStoreClient:send_revokeLongSession(authenticationToken)
  self.oprot:writeMessageBegin('revokeLongSession', TMessageType.CALL, self._seqid)
  local args = revokeLongSession_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_revokeLongSession(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = revokeLongSession_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function UserStoreClient:authenticateToBusiness(authenticationToken)
  self:send_authenticateToBusiness(authenticationToken)
  return self:recv_authenticateToBusiness(authenticationToken)
end

function UserStoreClient:send_authenticateToBusiness(authenticationToken)
  self.oprot:writeMessageBegin('authenticateToBusiness', TMessageType.CALL, self._seqid)
  local args = authenticateToBusiness_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_authenticateToBusiness(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = authenticateToBusiness_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserStoreClient:refreshAuthentication(authenticationToken)
  self:send_refreshAuthentication(authenticationToken)
  return self:recv_refreshAuthentication(authenticationToken)
end

function UserStoreClient:send_refreshAuthentication(authenticationToken)
  self.oprot:writeMessageBegin('refreshAuthentication', TMessageType.CALL, self._seqid)
  local args = refreshAuthentication_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_refreshAuthentication(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = refreshAuthentication_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserStoreClient:getUser(authenticationToken)
  self:send_getUser(authenticationToken)
  return self:recv_getUser(authenticationToken)
end

function UserStoreClient:send_getUser(authenticationToken)
  self.oprot:writeMessageBegin('getUser', TMessageType.CALL, self._seqid)
  local args = getUser_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_getUser(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getUser_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserStoreClient:getPublicUserInfo(username)
  self:send_getPublicUserInfo(username)
  return self:recv_getPublicUserInfo(username)
end

function UserStoreClient:send_getPublicUserInfo(username)
  self.oprot:writeMessageBegin('getPublicUserInfo', TMessageType.CALL, self._seqid)
  local args = getPublicUserInfo_args:new{}
  args.username = username
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_getPublicUserInfo(username)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPublicUserInfo_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.notFoundException then
    error(result.notFoundException)
  elseif result.systemException then
    error(result.systemException)
  elseif result.userException then
    error(result.userException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserStoreClient:getPremiumInfo(authenticationToken)
  self:send_getPremiumInfo(authenticationToken)
  return self:recv_getPremiumInfo(authenticationToken)
end

function UserStoreClient:send_getPremiumInfo(authenticationToken)
  self.oprot:writeMessageBegin('getPremiumInfo', TMessageType.CALL, self._seqid)
  local args = getPremiumInfo_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_getPremiumInfo(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getPremiumInfo_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserStoreClient:getNoteStoreUrl(authenticationToken)
  self:send_getNoteStoreUrl(authenticationToken)
  return self:recv_getNoteStoreUrl(authenticationToken)
end

function UserStoreClient:send_getNoteStoreUrl(authenticationToken)
  self.oprot:writeMessageBegin('getNoteStoreUrl', TMessageType.CALL, self._seqid)
  local args = getNoteStoreUrl_args:new{}
  args.authenticationToken = authenticationToken
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserStoreClient:recv_getNoteStoreUrl(authenticationToken)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getNoteStoreUrl_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.userException then
    error(result.userException)
  elseif result.systemException then
    error(result.systemException)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
UserStoreIface = __TObject:new{
  __type = 'UserStoreIface'
}


UserStoreProcessor = __TObject.new(__TProcessor
, {
 __type = 'UserStoreProcessor'
})

function UserStoreProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function UserStoreProcessor:process_checkVersion(seqid, iprot, oprot, server_ctx)
  local args = checkVersion_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = checkVersion_result:new{}
  local status, res = pcall(self.handler.checkVersion, self.handler, args.clientName, args.edamVersionMajor, args.edamVersionMinor)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('checkVersion', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_getBootstrapInfo(seqid, iprot, oprot, server_ctx)
  local args = getBootstrapInfo_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getBootstrapInfo_result:new{}
  local status, res = pcall(self.handler.getBootstrapInfo, self.handler, args.locale)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('getBootstrapInfo', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_authenticate(seqid, iprot, oprot, server_ctx)
  local args = authenticate_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = authenticate_result:new{}
  local status, res = pcall(self.handler.authenticate, self.handler, args.username, args.password, args.consumerKey, args.consumerSecret, args.supportsTwoFactor)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('authenticate', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_authenticateLongSession(seqid, iprot, oprot, server_ctx)
  local args = authenticateLongSession_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = authenticateLongSession_result:new{}
  local status, res = pcall(self.handler.authenticateLongSession, self.handler, args.username, args.password, args.consumerKey, args.consumerSecret, args.deviceIdentifier, args.deviceDescription, args.supportsTwoFactor)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('authenticateLongSession', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_completeTwoFactorAuthentication(seqid, iprot, oprot, server_ctx)
  local args = completeTwoFactorAuthentication_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = completeTwoFactorAuthentication_result:new{}
  local status, res = pcall(self.handler.completeTwoFactorAuthentication, self.handler, args.authenticationToken, args.oneTimeCode, args.deviceIdentifier, args.deviceDescription)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('completeTwoFactorAuthentication', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_revokeLongSession(seqid, iprot, oprot, server_ctx)
  local args = revokeLongSession_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = revokeLongSession_result:new{}
  local status, res = pcall(self.handler.revokeLongSession, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('revokeLongSession', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_authenticateToBusiness(seqid, iprot, oprot, server_ctx)
  local args = authenticateToBusiness_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = authenticateToBusiness_result:new{}
  local status, res = pcall(self.handler.authenticateToBusiness, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('authenticateToBusiness', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_refreshAuthentication(seqid, iprot, oprot, server_ctx)
  local args = refreshAuthentication_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = refreshAuthentication_result:new{}
  local status, res = pcall(self.handler.refreshAuthentication, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('refreshAuthentication', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_getUser(seqid, iprot, oprot, server_ctx)
  local args = getUser_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getUser_result:new{}
  local status, res = pcall(self.handler.getUser, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getUser', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_getPublicUserInfo(seqid, iprot, oprot, server_ctx)
  local args = getPublicUserInfo_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPublicUserInfo_result:new{}
  local status, res = pcall(self.handler.getPublicUserInfo, self.handler, args.username)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMNotFoundException' then
    result.notFoundException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPublicUserInfo', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_getPremiumInfo(seqid, iprot, oprot, server_ctx)
  local args = getPremiumInfo_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getPremiumInfo_result:new{}
  local status, res = pcall(self.handler.getPremiumInfo, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getPremiumInfo', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserStoreProcessor:process_getNoteStoreUrl(seqid, iprot, oprot, server_ctx)
  local args = getNoteStoreUrl_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getNoteStoreUrl_result:new{}
  local status, res = pcall(self.handler.getNoteStoreUrl, self.handler, args.authenticationToken)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'EDAMUserException' then
    result.userException = res
  elseif ttype(res) == 'EDAMSystemException' then
    result.systemException = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getNoteStoreUrl', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

checkVersion_args = __TObject:new{
  clientName,
  edamVersionMajor,
  edamVersionMinor
}

function checkVersion_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.clientName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I16 then
        self.edamVersionMajor = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I16 then
        self.edamVersionMinor = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function checkVersion_args:write(oprot)
  oprot:writeStructBegin('checkVersion_args')
  if self.clientName then
    oprot:writeFieldBegin('clientName', TType.STRING, 1)
    oprot:writeString(self.clientName)
    oprot:writeFieldEnd()
  end
  if self.edamVersionMajor then
    oprot:writeFieldBegin('edamVersionMajor', TType.I16, 2)
    oprot:writeI16(self.edamVersionMajor)
    oprot:writeFieldEnd()
  end
  if self.edamVersionMinor then
    oprot:writeFieldBegin('edamVersionMinor', TType.I16, 3)
    oprot:writeI16(self.edamVersionMinor)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

checkVersion_result = __TObject:new{
  success
}

function checkVersion_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function checkVersion_result:write(oprot)
  oprot:writeStructBegin('checkVersion_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBootstrapInfo_args = __TObject:new{
  locale
}

function getBootstrapInfo_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBootstrapInfo_args:write(oprot)
  oprot:writeStructBegin('getBootstrapInfo_args')
  if self.locale then
    oprot:writeFieldBegin('locale', TType.STRING, 1)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getBootstrapInfo_result = __TObject:new{
  success
}

function getBootstrapInfo_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = BootstrapInfo:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getBootstrapInfo_result:write(oprot)
  oprot:writeStructBegin('getBootstrapInfo_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

authenticate_args = __TObject:new{
  username,
  password,
  consumerKey,
  consumerSecret,
  supportsTwoFactor
}

function authenticate_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.password = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.consumerKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.consumerSecret = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.supportsTwoFactor = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authenticate_args:write(oprot)
  oprot:writeStructBegin('authenticate_args')
  if self.username then
    oprot:writeFieldBegin('username', TType.STRING, 1)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  if self.password then
    oprot:writeFieldBegin('password', TType.STRING, 2)
    oprot:writeString(self.password)
    oprot:writeFieldEnd()
  end
  if self.consumerKey then
    oprot:writeFieldBegin('consumerKey', TType.STRING, 3)
    oprot:writeString(self.consumerKey)
    oprot:writeFieldEnd()
  end
  if self.consumerSecret then
    oprot:writeFieldBegin('consumerSecret', TType.STRING, 4)
    oprot:writeString(self.consumerSecret)
    oprot:writeFieldEnd()
  end
  if self.supportsTwoFactor then
    oprot:writeFieldBegin('supportsTwoFactor', TType.BOOL, 5)
    oprot:writeBool(self.supportsTwoFactor)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

authenticate_result = __TObject:new{
  success,
  userException,
  systemException
}

function authenticate_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = AuthenticationResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authenticate_result:write(oprot)
  oprot:writeStructBegin('authenticate_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

authenticateLongSession_args = __TObject:new{
  username,
  password,
  consumerKey,
  consumerSecret,
  deviceIdentifier,
  deviceDescription,
  supportsTwoFactor
}

function authenticateLongSession_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.password = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.consumerKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.consumerSecret = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.deviceIdentifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.deviceDescription = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.supportsTwoFactor = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authenticateLongSession_args:write(oprot)
  oprot:writeStructBegin('authenticateLongSession_args')
  if self.username then
    oprot:writeFieldBegin('username', TType.STRING, 1)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  if self.password then
    oprot:writeFieldBegin('password', TType.STRING, 2)
    oprot:writeString(self.password)
    oprot:writeFieldEnd()
  end
  if self.consumerKey then
    oprot:writeFieldBegin('consumerKey', TType.STRING, 3)
    oprot:writeString(self.consumerKey)
    oprot:writeFieldEnd()
  end
  if self.consumerSecret then
    oprot:writeFieldBegin('consumerSecret', TType.STRING, 4)
    oprot:writeString(self.consumerSecret)
    oprot:writeFieldEnd()
  end
  if self.deviceIdentifier then
    oprot:writeFieldBegin('deviceIdentifier', TType.STRING, 5)
    oprot:writeString(self.deviceIdentifier)
    oprot:writeFieldEnd()
  end
  if self.deviceDescription then
    oprot:writeFieldBegin('deviceDescription', TType.STRING, 6)
    oprot:writeString(self.deviceDescription)
    oprot:writeFieldEnd()
  end
  if self.supportsTwoFactor then
    oprot:writeFieldBegin('supportsTwoFactor', TType.BOOL, 7)
    oprot:writeBool(self.supportsTwoFactor)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

authenticateLongSession_result = __TObject:new{
  success,
  userException,
  systemException
}

function authenticateLongSession_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = AuthenticationResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authenticateLongSession_result:write(oprot)
  oprot:writeStructBegin('authenticateLongSession_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

completeTwoFactorAuthentication_args = __TObject:new{
  authenticationToken,
  oneTimeCode,
  deviceIdentifier,
  deviceDescription
}

function completeTwoFactorAuthentication_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.oneTimeCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.deviceIdentifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.deviceDescription = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function completeTwoFactorAuthentication_args:write(oprot)
  oprot:writeStructBegin('completeTwoFactorAuthentication_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  if self.oneTimeCode then
    oprot:writeFieldBegin('oneTimeCode', TType.STRING, 2)
    oprot:writeString(self.oneTimeCode)
    oprot:writeFieldEnd()
  end
  if self.deviceIdentifier then
    oprot:writeFieldBegin('deviceIdentifier', TType.STRING, 3)
    oprot:writeString(self.deviceIdentifier)
    oprot:writeFieldEnd()
  end
  if self.deviceDescription then
    oprot:writeFieldBegin('deviceDescription', TType.STRING, 4)
    oprot:writeString(self.deviceDescription)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

completeTwoFactorAuthentication_result = __TObject:new{
  success,
  userException,
  systemException
}

function completeTwoFactorAuthentication_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = AuthenticationResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function completeTwoFactorAuthentication_result:write(oprot)
  oprot:writeStructBegin('completeTwoFactorAuthentication_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

revokeLongSession_args = __TObject:new{
  authenticationToken
}

function revokeLongSession_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function revokeLongSession_args:write(oprot)
  oprot:writeStructBegin('revokeLongSession_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

revokeLongSession_result = __TObject:new{
  userException,
  systemException
}

function revokeLongSession_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function revokeLongSession_result:write(oprot)
  oprot:writeStructBegin('revokeLongSession_result')
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

authenticateToBusiness_args = __TObject:new{
  authenticationToken
}

function authenticateToBusiness_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authenticateToBusiness_args:write(oprot)
  oprot:writeStructBegin('authenticateToBusiness_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

authenticateToBusiness_result = __TObject:new{
  success,
  userException,
  systemException
}

function authenticateToBusiness_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = AuthenticationResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authenticateToBusiness_result:write(oprot)
  oprot:writeStructBegin('authenticateToBusiness_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

refreshAuthentication_args = __TObject:new{
  authenticationToken
}

function refreshAuthentication_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function refreshAuthentication_args:write(oprot)
  oprot:writeStructBegin('refreshAuthentication_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

refreshAuthentication_result = __TObject:new{
  success,
  userException,
  systemException
}

function refreshAuthentication_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = AuthenticationResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function refreshAuthentication_result:write(oprot)
  oprot:writeStructBegin('refreshAuthentication_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUser_args = __TObject:new{
  authenticationToken
}

function getUser_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUser_args:write(oprot)
  oprot:writeStructBegin('getUser_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getUser_result = __TObject:new{
  success,
  userException,
  systemException
}

function getUser_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = User:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getUser_result:write(oprot)
  oprot:writeStructBegin('getUser_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPublicUserInfo_args = __TObject:new{
  username
}

function getPublicUserInfo_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPublicUserInfo_args:write(oprot)
  oprot:writeStructBegin('getPublicUserInfo_args')
  if self.username then
    oprot:writeFieldBegin('username', TType.STRING, 1)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPublicUserInfo_result = __TObject:new{
  success,
  notFoundException,
  systemException,
  userException
}

function getPublicUserInfo_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PublicUserInfo:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.notFoundException = EDAMNotFoundException:new{}
        self.notFoundException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPublicUserInfo_result:write(oprot)
  oprot:writeStructBegin('getPublicUserInfo_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.notFoundException then
    oprot:writeFieldBegin('notFoundException', TType.STRUCT, 1)
    self.notFoundException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 3)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPremiumInfo_args = __TObject:new{
  authenticationToken
}

function getPremiumInfo_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPremiumInfo_args:write(oprot)
  oprot:writeStructBegin('getPremiumInfo_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getPremiumInfo_result = __TObject:new{
  success,
  userException,
  systemException
}

function getPremiumInfo_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = PremiumInfo:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getPremiumInfo_result:write(oprot)
  oprot:writeStructBegin('getPremiumInfo_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteStoreUrl_args = __TObject:new{
  authenticationToken
}

function getNoteStoreUrl_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authenticationToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteStoreUrl_args:write(oprot)
  oprot:writeStructBegin('getNoteStoreUrl_args')
  if self.authenticationToken then
    oprot:writeFieldBegin('authenticationToken', TType.STRING, 1)
    oprot:writeString(self.authenticationToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getNoteStoreUrl_result = __TObject:new{
  success,
  userException,
  systemException
}

function getNoteStoreUrl_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.userException = EDAMUserException:new{}
        self.userException:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.systemException = EDAMSystemException:new{}
        self.systemException:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getNoteStoreUrl_result:write(oprot)
  oprot:writeStructBegin('getNoteStoreUrl_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.userException then
    oprot:writeFieldBegin('userException', TType.STRUCT, 1)
    self.userException:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.systemException then
    oprot:writeFieldBegin('systemException', TType.STRUCT, 2)
    self.systemException:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
